/*
 * Retell SDK
 * API for voice AI. Effortlessly integrate human-like Voice AI into your product. | We are building an API that enables your product to provide an intuitive and engaging way for user interaction - through voice.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@retellai.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ToolParameter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CustomTool
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CustomTool {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private ToolParameter parameters;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
 public enum TypeEnum {
    CUSTOM("custom");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_SPEAK_DURING_EXECUTION = "speak_during_execution";
  @SerializedName(SERIALIZED_NAME_SPEAK_DURING_EXECUTION)
  private Boolean speakDuringExecution;

  public static final String SERIALIZED_NAME_SPEAK_AFTER_EXECUTION = "speak_after_execution";
  @SerializedName(SERIALIZED_NAME_SPEAK_AFTER_EXECUTION)
  private Boolean speakAfterExecution;

  public static final String SERIALIZED_NAME_EXECUTION_MESSAGE_DESCRIPTION = "execution_message_description";
  @SerializedName(SERIALIZED_NAME_EXECUTION_MESSAGE_DESCRIPTION)
  private String executionMessageDescription;

  public CustomTool() {
  }

  public CustomTool description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Describes what this tool does and when to call this tool.
   * @return description
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Describes what this tool does and when to call this tool.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public CustomTool parameters(ToolParameter parameters) {
    
    
    
    
    this.parameters = parameters;
    return this;
  }

   /**
   * Get parameters
   * @return parameters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ToolParameter getParameters() {
    return parameters;
  }


  public void setParameters(ToolParameter parameters) {
    
    
    
    this.parameters = parameters;
  }


  public CustomTool type(TypeEnum type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    
    
    
    this.type = type;
  }


  public CustomTool name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Name of the tool. Must be unique within all tools available to LLM at any given time (general tools + state tools + state edges).
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name of the tool. Must be unique within all tools available to LLM at any given time (general tools + state tools + state edges).")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public CustomTool url(String url) {
    
    
    
    
    this.url = url;
    return this;
  }

   /**
   * The URL we will post the function name and arguments to get a result for the function. Usually this is your server.
   * @return url
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The URL we will post the function name and arguments to get a result for the function. Usually this is your server.")

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    
    
    
    this.url = url;
  }


  public CustomTool speakDuringExecution(Boolean speakDuringExecution) {
    
    
    
    
    this.speakDuringExecution = speakDuringExecution;
    return this;
  }

   /**
   * Determines whether the agent would say sentence like \&quot;One moment, let me check that.\&quot; when executing the function. Recommend to turn on if your function call takes over 1s (including network) to complete, so that your agent remains responsive.
   * @return speakDuringExecution
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Determines whether the agent would say sentence like \"One moment, let me check that.\" when executing the function. Recommend to turn on if your function call takes over 1s (including network) to complete, so that your agent remains responsive.")

  public Boolean getSpeakDuringExecution() {
    return speakDuringExecution;
  }


  public void setSpeakDuringExecution(Boolean speakDuringExecution) {
    
    
    
    this.speakDuringExecution = speakDuringExecution;
  }


  public CustomTool speakAfterExecution(Boolean speakAfterExecution) {
    
    
    
    
    this.speakAfterExecution = speakAfterExecution;
    return this;
  }

   /**
   * Determines whether the agent would call LLM another time and speak when the result of function is obtained. Usually this needs to get turned on so user can get update for the function call.
   * @return speakAfterExecution
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Determines whether the agent would call LLM another time and speak when the result of function is obtained. Usually this needs to get turned on so user can get update for the function call.")

  public Boolean getSpeakAfterExecution() {
    return speakAfterExecution;
  }


  public void setSpeakAfterExecution(Boolean speakAfterExecution) {
    
    
    
    this.speakAfterExecution = speakAfterExecution;
  }


  public CustomTool executionMessageDescription(String executionMessageDescription) {
    
    
    
    
    this.executionMessageDescription = executionMessageDescription;
    return this;
  }

   /**
   * The description for the sentence agent say during execution. Only applicable when speak_during_execution is true. Can write what to say or even provide examples. The default is \&quot;The message you will say to callee when calling this tool. Make sure it fits into the conversation smoothly.\&quot;.
   * @return executionMessageDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The description for the sentence agent say during execution. Only applicable when speak_during_execution is true. Can write what to say or even provide examples. The default is \"The message you will say to callee when calling this tool. Make sure it fits into the conversation smoothly.\".")

  public String getExecutionMessageDescription() {
    return executionMessageDescription;
  }


  public void setExecutionMessageDescription(String executionMessageDescription) {
    
    
    
    this.executionMessageDescription = executionMessageDescription;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CustomTool instance itself
   */
  public CustomTool putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomTool customTool = (CustomTool) o;
    return Objects.equals(this.description, customTool.description) &&
        Objects.equals(this.parameters, customTool.parameters) &&
        Objects.equals(this.type, customTool.type) &&
        Objects.equals(this.name, customTool.name) &&
        Objects.equals(this.url, customTool.url) &&
        Objects.equals(this.speakDuringExecution, customTool.speakDuringExecution) &&
        Objects.equals(this.speakAfterExecution, customTool.speakAfterExecution) &&
        Objects.equals(this.executionMessageDescription, customTool.executionMessageDescription)&&
        Objects.equals(this.additionalProperties, customTool.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, parameters, type, name, url, speakDuringExecution, speakAfterExecution, executionMessageDescription, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomTool {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    speakDuringExecution: ").append(toIndentedString(speakDuringExecution)).append("\n");
    sb.append("    speakAfterExecution: ").append(toIndentedString(speakAfterExecution)).append("\n");
    sb.append("    executionMessageDescription: ").append(toIndentedString(executionMessageDescription)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("parameters");
    openapiFields.add("type");
    openapiFields.add("name");
    openapiFields.add("url");
    openapiFields.add("speak_during_execution");
    openapiFields.add("speak_after_execution");
    openapiFields.add("execution_message_description");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("speak_during_execution");
    openapiRequiredFields.add("speak_after_execution");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CustomTool
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CustomTool.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomTool is not found in the empty JSON string", CustomTool.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CustomTool.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `parameters`
      if (jsonObj.get("parameters") != null && !jsonObj.get("parameters").isJsonNull()) {
        ToolParameter.validateJsonObject(jsonObj.getAsJsonObject("parameters"));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("execution_message_description") != null && !jsonObj.get("execution_message_description").isJsonNull()) && !jsonObj.get("execution_message_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `execution_message_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("execution_message_description").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomTool.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomTool' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomTool> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomTool.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomTool>() {
           @Override
           public void write(JsonWriter out, CustomTool value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomTool read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CustomTool instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CustomTool given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CustomTool
  * @throws IOException if the JSON string is invalid with respect to CustomTool
  */
  public static CustomTool fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomTool.class);
  }

 /**
  * Convert an instance of CustomTool to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

