/*
 * Retell SDK
 * API for voice AI. Effortlessly integrate human-like Voice AI into your product. | We are building an API that enables your product to provide an intuitive and engaging way for user interaction - through voice.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@retellai.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.PhoneNumberPurchaseNumberAndBindAgentRequest;
import com.konfigthis.client.model.PhoneNumberResponse;
import com.konfigthis.client.model.PhoneNumberUpdateRetellLlmRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PhoneNumberApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PhoneNumberApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PhoneNumberApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getAllNumbersCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/list-phone-numbers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllNumbersValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAllNumbersCall(_callback);

    }


    private ApiResponse<List<PhoneNumberResponse>> getAllNumbersWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllNumbersValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<PhoneNumberResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllNumbersAsync(final ApiCallback<List<PhoneNumberResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllNumbersValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<PhoneNumberResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllNumbersRequestBuilder {

        private GetAllNumbersRequestBuilder() {
        }

        /**
         * Build call for getAllNumbers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved all phone numbers. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllNumbersCall(_callback);
        }


        /**
         * Execute getAllNumbers request
         * @return List&lt;PhoneNumberResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved all phone numbers. </td><td>  -  </td></tr>
         </table>
         */
        public List<PhoneNumberResponse> execute() throws ApiException {
            ApiResponse<List<PhoneNumberResponse>> localVarResp = getAllNumbersWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllNumbers request with HTTP info returned
         * @return ApiResponse&lt;List&lt;PhoneNumberResponse&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved all phone numbers. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<PhoneNumberResponse>> executeWithHttpInfo() throws ApiException {
            return getAllNumbersWithHttpInfo();
        }

        /**
         * Execute getAllNumbers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved all phone numbers. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<PhoneNumberResponse>> _callback) throws ApiException {
            return getAllNumbersAsync(_callback);
        }
    }

    /**
     * 
     * List all phone numbers
     * @return GetAllNumbersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved all phone numbers. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllNumbersRequestBuilder getAllNumbers() throws IllegalArgumentException {
        return new GetAllNumbersRequestBuilder();
    }
    private okhttp3.Call getDetailsCall(String phoneNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/get-phone-number/{phone_number}"
            .replace("{" + "phone_number" + "}", localVarApiClient.escapeString(phoneNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailsValidateBeforeCall(String phoneNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'phoneNumber' is set
        if (phoneNumber == null) {
            throw new ApiException("Missing the required parameter 'phoneNumber' when calling getDetails(Async)");
        }

        return getDetailsCall(phoneNumber, _callback);

    }


    private ApiResponse<PhoneNumberResponse> getDetailsWithHttpInfo(String phoneNumber) throws ApiException {
        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(phoneNumber, null);
        Type localVarReturnType = new TypeToken<PhoneNumberResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetailsAsync(String phoneNumber, final ApiCallback<PhoneNumberResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(phoneNumber, _callback);
        Type localVarReturnType = new TypeToken<PhoneNumberResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetailsRequestBuilder {
        private final String phoneNumber;

        private GetDetailsRequestBuilder(String phoneNumber) {
            this.phoneNumber = phoneNumber;
        }

        /**
         * Build call for getDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved an Retell LLM. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetailsCall(phoneNumber, _callback);
        }


        /**
         * Execute getDetails request
         * @return PhoneNumberResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved an Retell LLM. </td><td>  -  </td></tr>
         </table>
         */
        public PhoneNumberResponse execute() throws ApiException {
            ApiResponse<PhoneNumberResponse> localVarResp = getDetailsWithHttpInfo(phoneNumber);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetails request with HTTP info returned
         * @return ApiResponse&lt;PhoneNumberResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved an Retell LLM. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PhoneNumberResponse> executeWithHttpInfo() throws ApiException {
            return getDetailsWithHttpInfo(phoneNumber);
        }

        /**
         * Execute getDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved an Retell LLM. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PhoneNumberResponse> _callback) throws ApiException {
            return getDetailsAsync(phoneNumber, _callback);
        }
    }

    /**
     * 
     * Retrieve details of a specific phone number
     * @param phoneNumber BCP 47 format of the number (+country code, then number with no space, no special characters), used as the unique identifier for phone number APIs. (required)
     * @return GetDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved an Retell LLM. </td><td>  -  </td></tr>
     </table>
     */
    public GetDetailsRequestBuilder getDetails(String phoneNumber) throws IllegalArgumentException {
        if (phoneNumber == null) throw new IllegalArgumentException("\"phoneNumber\" is required but got null");
            

        return new GetDetailsRequestBuilder(phoneNumber);
    }
    private okhttp3.Call purchaseNumberAndBindAgentCall(PhoneNumberPurchaseNumberAndBindAgentRequest phoneNumberPurchaseNumberAndBindAgentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = phoneNumberPurchaseNumberAndBindAgentRequest;

        // create path and map variables
        String localVarPath = "/create-phone-number";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call purchaseNumberAndBindAgentValidateBeforeCall(PhoneNumberPurchaseNumberAndBindAgentRequest phoneNumberPurchaseNumberAndBindAgentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'phoneNumberPurchaseNumberAndBindAgentRequest' is set
        if (phoneNumberPurchaseNumberAndBindAgentRequest == null) {
            throw new ApiException("Missing the required parameter 'phoneNumberPurchaseNumberAndBindAgentRequest' when calling purchaseNumberAndBindAgent(Async)");
        }

        return purchaseNumberAndBindAgentCall(phoneNumberPurchaseNumberAndBindAgentRequest, _callback);

    }


    private ApiResponse<PhoneNumberResponse> purchaseNumberAndBindAgentWithHttpInfo(PhoneNumberPurchaseNumberAndBindAgentRequest phoneNumberPurchaseNumberAndBindAgentRequest) throws ApiException {
        okhttp3.Call localVarCall = purchaseNumberAndBindAgentValidateBeforeCall(phoneNumberPurchaseNumberAndBindAgentRequest, null);
        Type localVarReturnType = new TypeToken<PhoneNumberResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call purchaseNumberAndBindAgentAsync(PhoneNumberPurchaseNumberAndBindAgentRequest phoneNumberPurchaseNumberAndBindAgentRequest, final ApiCallback<PhoneNumberResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = purchaseNumberAndBindAgentValidateBeforeCall(phoneNumberPurchaseNumberAndBindAgentRequest, _callback);
        Type localVarReturnType = new TypeToken<PhoneNumberResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PurchaseNumberAndBindAgentRequestBuilder {
        private final String agentId;
        private Integer areaCode;

        private PurchaseNumberAndBindAgentRequestBuilder(String agentId) {
            this.agentId = agentId;
        }

        /**
         * Set areaCode
         * @param areaCode Area code of the number to obtain. Format is a 3 digit integer. Currently only supports US area code. (optional)
         * @return PurchaseNumberAndBindAgentRequestBuilder
         */
        public PurchaseNumberAndBindAgentRequestBuilder areaCode(Integer areaCode) {
            this.areaCode = areaCode;
            return this;
        }
        
        /**
         * Build call for purchaseNumberAndBindAgent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created a new number. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PhoneNumberPurchaseNumberAndBindAgentRequest phoneNumberPurchaseNumberAndBindAgentRequest = buildBodyParams();
            return purchaseNumberAndBindAgentCall(phoneNumberPurchaseNumberAndBindAgentRequest, _callback);
        }

        private PhoneNumberPurchaseNumberAndBindAgentRequest buildBodyParams() {
            PhoneNumberPurchaseNumberAndBindAgentRequest phoneNumberPurchaseNumberAndBindAgentRequest = new PhoneNumberPurchaseNumberAndBindAgentRequest();
            phoneNumberPurchaseNumberAndBindAgentRequest.agentId(this.agentId);
            phoneNumberPurchaseNumberAndBindAgentRequest.areaCode(this.areaCode);
            return phoneNumberPurchaseNumberAndBindAgentRequest;
        }

        /**
         * Execute purchaseNumberAndBindAgent request
         * @return PhoneNumberResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created a new number. </td><td>  -  </td></tr>
         </table>
         */
        public PhoneNumberResponse execute() throws ApiException {
            PhoneNumberPurchaseNumberAndBindAgentRequest phoneNumberPurchaseNumberAndBindAgentRequest = buildBodyParams();
            ApiResponse<PhoneNumberResponse> localVarResp = purchaseNumberAndBindAgentWithHttpInfo(phoneNumberPurchaseNumberAndBindAgentRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute purchaseNumberAndBindAgent request with HTTP info returned
         * @return ApiResponse&lt;PhoneNumberResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created a new number. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PhoneNumberResponse> executeWithHttpInfo() throws ApiException {
            PhoneNumberPurchaseNumberAndBindAgentRequest phoneNumberPurchaseNumberAndBindAgentRequest = buildBodyParams();
            return purchaseNumberAndBindAgentWithHttpInfo(phoneNumberPurchaseNumberAndBindAgentRequest);
        }

        /**
         * Execute purchaseNumberAndBindAgent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created a new number. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PhoneNumberResponse> _callback) throws ApiException {
            PhoneNumberPurchaseNumberAndBindAgentRequest phoneNumberPurchaseNumberAndBindAgentRequest = buildBodyParams();
            return purchaseNumberAndBindAgentAsync(phoneNumberPurchaseNumberAndBindAgentRequest, _callback);
        }
    }

    /**
     * 
     * Buy a new phone number &amp; Bind an agent
     * @param phoneNumberPurchaseNumberAndBindAgentRequest  (required)
     * @return PurchaseNumberAndBindAgentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created a new number. </td><td>  -  </td></tr>
     </table>
     */
    public PurchaseNumberAndBindAgentRequestBuilder purchaseNumberAndBindAgent(String agentId) throws IllegalArgumentException {
        if (agentId == null) throw new IllegalArgumentException("\"agentId\" is required but got null");
            

        return new PurchaseNumberAndBindAgentRequestBuilder(agentId);
    }
    private okhttp3.Call removePhoneNumberCall(String phoneNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delete-phone-number/{phone_number}"
            .replace("{" + "phone_number" + "}", localVarApiClient.escapeString(phoneNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removePhoneNumberValidateBeforeCall(String phoneNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'phoneNumber' is set
        if (phoneNumber == null) {
            throw new ApiException("Missing the required parameter 'phoneNumber' when calling removePhoneNumber(Async)");
        }

        return removePhoneNumberCall(phoneNumber, _callback);

    }


    private ApiResponse<Void> removePhoneNumberWithHttpInfo(String phoneNumber) throws ApiException {
        okhttp3.Call localVarCall = removePhoneNumberValidateBeforeCall(phoneNumber, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removePhoneNumberAsync(String phoneNumber, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removePhoneNumberValidateBeforeCall(phoneNumber, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemovePhoneNumberRequestBuilder {
        private final String phoneNumber;

        private RemovePhoneNumberRequestBuilder(String phoneNumber) {
            this.phoneNumber = phoneNumber;
        }

        /**
         * Build call for removePhoneNumber
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removePhoneNumberCall(phoneNumber, _callback);
        }


        /**
         * Execute removePhoneNumber request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removePhoneNumberWithHttpInfo(phoneNumber);
        }

        /**
         * Execute removePhoneNumber request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removePhoneNumberWithHttpInfo(phoneNumber);
        }

        /**
         * Execute removePhoneNumber request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removePhoneNumberAsync(phoneNumber, _callback);
        }
    }

    /**
     * 
     * Delete an existing phone number
     * @param phoneNumber BCP 47 format of the number (+country code, then number with no space, no special characters), used as the unique identifier for phone number APIs. (required)
     * @return RemovePhoneNumberRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public RemovePhoneNumberRequestBuilder removePhoneNumber(String phoneNumber) throws IllegalArgumentException {
        if (phoneNumber == null) throw new IllegalArgumentException("\"phoneNumber\" is required but got null");
            

        return new RemovePhoneNumberRequestBuilder(phoneNumber);
    }
    private okhttp3.Call updateRetellLlmCall(String phoneNumber, PhoneNumberUpdateRetellLlmRequest phoneNumberUpdateRetellLlmRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = phoneNumberUpdateRetellLlmRequest;

        // create path and map variables
        String localVarPath = "/update-phone-number/{phone_number}"
            .replace("{" + "phone_number" + "}", localVarApiClient.escapeString(phoneNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRetellLlmValidateBeforeCall(String phoneNumber, PhoneNumberUpdateRetellLlmRequest phoneNumberUpdateRetellLlmRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'phoneNumber' is set
        if (phoneNumber == null) {
            throw new ApiException("Missing the required parameter 'phoneNumber' when calling updateRetellLlm(Async)");
        }

        // verify the required parameter 'phoneNumberUpdateRetellLlmRequest' is set
        if (phoneNumberUpdateRetellLlmRequest == null) {
            throw new ApiException("Missing the required parameter 'phoneNumberUpdateRetellLlmRequest' when calling updateRetellLlm(Async)");
        }

        return updateRetellLlmCall(phoneNumber, phoneNumberUpdateRetellLlmRequest, _callback);

    }


    private ApiResponse<PhoneNumberResponse> updateRetellLlmWithHttpInfo(String phoneNumber, PhoneNumberUpdateRetellLlmRequest phoneNumberUpdateRetellLlmRequest) throws ApiException {
        okhttp3.Call localVarCall = updateRetellLlmValidateBeforeCall(phoneNumber, phoneNumberUpdateRetellLlmRequest, null);
        Type localVarReturnType = new TypeToken<PhoneNumberResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateRetellLlmAsync(String phoneNumber, PhoneNumberUpdateRetellLlmRequest phoneNumberUpdateRetellLlmRequest, final ApiCallback<PhoneNumberResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRetellLlmValidateBeforeCall(phoneNumber, phoneNumberUpdateRetellLlmRequest, _callback);
        Type localVarReturnType = new TypeToken<PhoneNumberResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateRetellLlmRequestBuilder {
        private final String agentId;
        private final String phoneNumber;

        private UpdateRetellLlmRequestBuilder(String agentId, String phoneNumber) {
            this.agentId = agentId;
            this.phoneNumber = phoneNumber;
        }

        /**
         * Build call for updateRetellLlm
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated an phone number object. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PhoneNumberUpdateRetellLlmRequest phoneNumberUpdateRetellLlmRequest = buildBodyParams();
            return updateRetellLlmCall(phoneNumber, phoneNumberUpdateRetellLlmRequest, _callback);
        }

        private PhoneNumberUpdateRetellLlmRequest buildBodyParams() {
            PhoneNumberUpdateRetellLlmRequest phoneNumberUpdateRetellLlmRequest = new PhoneNumberUpdateRetellLlmRequest();
            phoneNumberUpdateRetellLlmRequest.agentId(this.agentId);
            return phoneNumberUpdateRetellLlmRequest;
        }

        /**
         * Execute updateRetellLlm request
         * @return PhoneNumberResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated an phone number object. </td><td>  -  </td></tr>
         </table>
         */
        public PhoneNumberResponse execute() throws ApiException {
            PhoneNumberUpdateRetellLlmRequest phoneNumberUpdateRetellLlmRequest = buildBodyParams();
            ApiResponse<PhoneNumberResponse> localVarResp = updateRetellLlmWithHttpInfo(phoneNumber, phoneNumberUpdateRetellLlmRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateRetellLlm request with HTTP info returned
         * @return ApiResponse&lt;PhoneNumberResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated an phone number object. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PhoneNumberResponse> executeWithHttpInfo() throws ApiException {
            PhoneNumberUpdateRetellLlmRequest phoneNumberUpdateRetellLlmRequest = buildBodyParams();
            return updateRetellLlmWithHttpInfo(phoneNumber, phoneNumberUpdateRetellLlmRequest);
        }

        /**
         * Execute updateRetellLlm request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated an phone number object. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PhoneNumberResponse> _callback) throws ApiException {
            PhoneNumberUpdateRetellLlmRequest phoneNumberUpdateRetellLlmRequest = buildBodyParams();
            return updateRetellLlmAsync(phoneNumber, phoneNumberUpdateRetellLlmRequest, _callback);
        }
    }

    /**
     * 
     * Update an existing Retell LLM
     * @param phoneNumber BCP 47 format of the number (+country code, then number with no space, no special characters), used as the unique identifier for phone number APIs. (required)
     * @param phoneNumberUpdateRetellLlmRequest  (required)
     * @return UpdateRetellLlmRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated an phone number object. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRetellLlmRequestBuilder updateRetellLlm(String agentId, String phoneNumber) throws IllegalArgumentException {
        if (agentId == null) throw new IllegalArgumentException("\"agentId\" is required but got null");
            

        if (phoneNumber == null) throw new IllegalArgumentException("\"phoneNumber\" is required but got null");
            

        return new UpdateRetellLlmRequestBuilder(agentId, phoneNumber);
    }
}
