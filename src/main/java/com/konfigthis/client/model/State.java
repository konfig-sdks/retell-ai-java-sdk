/*
 * Retell SDK
 * API for voice AI. Effortlessly integrate human-like Voice AI into your product. | We are building an API that enables your product to provide an intuitive and engaging way for user interaction - through voice.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@retellai.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.StateEdge;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * State
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class State {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_STATE_PROMPT = "state_prompt";
  @SerializedName(SERIALIZED_NAME_STATE_PROMPT)
  private String statePrompt;

  public static final String SERIALIZED_NAME_EDGES = "edges";
  @SerializedName(SERIALIZED_NAME_EDGES)
  private List<StateEdge> edges = null;

  public static final String SERIALIZED_NAME_TOOLS = "tools";
  @SerializedName(SERIALIZED_NAME_TOOLS)
  private List<Object> tools = null;

  public State() {
  }

  public State name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Name of the state, must be unique for each state.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "information_collection", required = true, value = "Name of the state, must be unique for each state.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public State statePrompt(String statePrompt) {
    
    
    
    
    this.statePrompt = statePrompt;
    return this;
  }

   /**
   * Prompt of the state, will be appended to the system prompt of LLM.    - System prompt &#x3D; general prompt + state prompt.
   * @return statePrompt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "## Task You will follow the steps below...", value = "Prompt of the state, will be appended to the system prompt of LLM.    - System prompt = general prompt + state prompt.")

  public String getStatePrompt() {
    return statePrompt;
  }


  public void setStatePrompt(String statePrompt) {
    
    
    
    this.statePrompt = statePrompt;
  }


  public State edges(List<StateEdge> edges) {
    
    
    
    
    this.edges = edges;
    return this;
  }

  public State addEdgesItem(StateEdge edgesItem) {
    if (this.edges == null) {
      this.edges = new ArrayList<>();
    }
    this.edges.add(edgesItem);
    return this;
  }

   /**
   * Edges of the state define how and what state can be reached from this state.
   * @return edges
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Edges of the state define how and what state can be reached from this state.")

  public List<StateEdge> getEdges() {
    return edges;
  }


  public void setEdges(List<StateEdge> edges) {
    
    
    
    this.edges = edges;
  }


  public State tools(List<Object> tools) {
    
    
    
    
    this.tools = tools;
    return this;
  }

  public State addToolsItem(Object toolsItem) {
    if (this.tools == null) {
      this.tools = new ArrayList<>();
    }
    this.tools.add(toolsItem);
    return this;
  }

   /**
   * A list of tools specific to this state the model may call (to get external knowledge, call API, etc). You can select from some common predefined tools like end call, transfer call, etc; or you can create your own custom tool (last option) for the LLM to use.   - Tools of LLM &#x3D; general tools + state tools + state transitions
   * @return tools
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of tools specific to this state the model may call (to get external knowledge, call API, etc). You can select from some common predefined tools like end call, transfer call, etc; or you can create your own custom tool (last option) for the LLM to use.   - Tools of LLM = general tools + state tools + state transitions")

  public List<Object> getTools() {
    return tools;
  }


  public void setTools(List<Object> tools) {
    
    
    
    this.tools = tools;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the State instance itself
   */
  public State putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    State state = (State) o;
    return Objects.equals(this.name, state.name) &&
        Objects.equals(this.statePrompt, state.statePrompt) &&
        Objects.equals(this.edges, state.edges) &&
        Objects.equals(this.tools, state.tools)&&
        Objects.equals(this.additionalProperties, state.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, statePrompt, edges, tools, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class State {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    statePrompt: ").append(toIndentedString(statePrompt)).append("\n");
    sb.append("    edges: ").append(toIndentedString(edges)).append("\n");
    sb.append("    tools: ").append(toIndentedString(tools)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("state_prompt");
    openapiFields.add("edges");
    openapiFields.add("tools");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to State
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!State.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in State is not found in the empty JSON string", State.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : State.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("state_prompt") != null && !jsonObj.get("state_prompt").isJsonNull()) && !jsonObj.get("state_prompt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state_prompt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state_prompt").toString()));
      }
      if (jsonObj.get("edges") != null && !jsonObj.get("edges").isJsonNull()) {
        JsonArray jsonArrayedges = jsonObj.getAsJsonArray("edges");
        if (jsonArrayedges != null) {
          // ensure the json data is an array
          if (!jsonObj.get("edges").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `edges` to be an array in the JSON string but got `%s`", jsonObj.get("edges").toString()));
          }

          // validate the optional field `edges` (array)
          for (int i = 0; i < jsonArrayedges.size(); i++) {
            StateEdge.validateJsonObject(jsonArrayedges.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tools") != null && !jsonObj.get("tools").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tools` to be an array in the JSON string but got `%s`", jsonObj.get("tools").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!State.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'State' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<State> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(State.class));

       return (TypeAdapter<T>) new TypeAdapter<State>() {
           @Override
           public void write(JsonWriter out, State value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public State read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             State instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of State given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of State
  * @throws IOException if the JSON string is invalid with respect to State
  */
  public static State fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, State.class);
  }

 /**
  * Convert an instance of State to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

