/*
 * Retell SDK
 * API for voice AI. Effortlessly integrate human-like Voice AI into your product. | We are building an API that enables your product to provide an intuitive and engaging way for user interaction - through voice.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@retellai.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CallBase;
import com.konfigthis.client.model.CallDetail;
import com.konfigthis.client.model.CallEstablishConnectionRequest;
import com.konfigthis.client.model.CallGetDetailsFilterCriteriaParameter;
import com.konfigthis.client.model.CallMakeConnectionRequest;
import com.konfigthis.client.model.CallMakeConnectionRequestPhoneNumber;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CallApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CallApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CallApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call establishConnectionCall(CallEstablishConnectionRequest callEstablishConnectionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = callEstablishConnectionRequest;

        // create path and map variables
        String localVarPath = "/register-call";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call establishConnectionValidateBeforeCall(CallEstablishConnectionRequest callEstablishConnectionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'callEstablishConnectionRequest' is set
        if (callEstablishConnectionRequest == null) {
            throw new ApiException("Missing the required parameter 'callEstablishConnectionRequest' when calling establishConnection(Async)");
        }

        return establishConnectionCall(callEstablishConnectionRequest, _callback);

    }


    private ApiResponse<CallBase> establishConnectionWithHttpInfo(CallEstablishConnectionRequest callEstablishConnectionRequest) throws ApiException {
        okhttp3.Call localVarCall = establishConnectionValidateBeforeCall(callEstablishConnectionRequest, null);
        Type localVarReturnType = new TypeToken<CallBase>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call establishConnectionAsync(CallEstablishConnectionRequest callEstablishConnectionRequest, final ApiCallback<CallBase> _callback) throws ApiException {

        okhttp3.Call localVarCall = establishConnectionValidateBeforeCall(callEstablishConnectionRequest, _callback);
        Type localVarReturnType = new TypeToken<CallBase>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class EstablishConnectionRequestBuilder {
        private final String agentId;
        private final String audioWebsocketProtocol;
        private final String audioEncoding;
        private final Integer sampleRate;
        private Integer endCallAfterSilenceMs;
        private String fromNumber;
        private String toNumber;
        private Object metadata;
        private Map<String, Object> retellLlmDynamicVariables;

        private EstablishConnectionRequestBuilder(String agentId, String audioWebsocketProtocol, String audioEncoding, Integer sampleRate) {
            this.agentId = agentId;
            this.audioWebsocketProtocol = audioWebsocketProtocol;
            this.audioEncoding = audioEncoding;
            this.sampleRate = sampleRate;
        }

        /**
         * Set endCallAfterSilenceMs
         * @param endCallAfterSilenceMs If users stay silent for a period, end the call. By default, it is set to 600,000 ms (10 min). The minimum value allowed is 10,000 ms (10 s). (optional)
         * @return EstablishConnectionRequestBuilder
         */
        public EstablishConnectionRequestBuilder endCallAfterSilenceMs(Integer endCallAfterSilenceMs) {
            this.endCallAfterSilenceMs = endCallAfterSilenceMs;
            return this;
        }
        
        /**
         * Set fromNumber
         * @param fromNumber The caller number. This field is storage purpose only, set this if you want the call object to contain it so that it&#39;s easier to reference it. Not used for processing, when we connect to your LLM websocket server, you can then get it from the call object. (optional)
         * @return EstablishConnectionRequestBuilder
         */
        public EstablishConnectionRequestBuilder fromNumber(String fromNumber) {
            this.fromNumber = fromNumber;
            return this;
        }
        
        /**
         * Set toNumber
         * @param toNumber The callee number. This field is storage purpose only, set this if you want the call object to contain it so that it&#39;s easier to reference it. Not used for processing, when we connect to your LLM websocket server, you can then get it from the call object. (optional)
         * @return EstablishConnectionRequestBuilder
         */
        public EstablishConnectionRequestBuilder toNumber(String toNumber) {
            this.toNumber = toNumber;
            return this;
        }
        
        /**
         * Set metadata
         * @param metadata An abtriary object for storage purpose only. You can put anything here like your own id for the call, twilio SID, internal customer id. Not used for processing, when we connect to your LLM websocket server, you can then get it from the call object. (optional)
         * @return EstablishConnectionRequestBuilder
         */
        public EstablishConnectionRequestBuilder metadata(Object metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Set retellLlmDynamicVariables
         * @param retellLlmDynamicVariables Add optional dynamic variables in key value pairs of string that injects into your Retell LLM prompt and tool description. Only applicable for Retell LLM. (optional)
         * @return EstablishConnectionRequestBuilder
         */
        public EstablishConnectionRequestBuilder retellLlmDynamicVariables(Map<String, Object> retellLlmDynamicVariables) {
            this.retellLlmDynamicVariables = retellLlmDynamicVariables;
            return this;
        }
        
        /**
         * Build call for establishConnection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully registered a call. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CallEstablishConnectionRequest callEstablishConnectionRequest = buildBodyParams();
            return establishConnectionCall(callEstablishConnectionRequest, _callback);
        }

        private CallEstablishConnectionRequest buildBodyParams() {
            CallEstablishConnectionRequest callEstablishConnectionRequest = new CallEstablishConnectionRequest();
            callEstablishConnectionRequest.agentId(this.agentId);
            if (this.audioWebsocketProtocol != null)
            callEstablishConnectionRequest.audioWebsocketProtocol(CallEstablishConnectionRequest.AudioWebsocketProtocolEnum.fromValue(this.audioWebsocketProtocol));
            if (this.audioEncoding != null)
            callEstablishConnectionRequest.audioEncoding(CallEstablishConnectionRequest.AudioEncodingEnum.fromValue(this.audioEncoding));
            callEstablishConnectionRequest.sampleRate(this.sampleRate);
            callEstablishConnectionRequest.endCallAfterSilenceMs(this.endCallAfterSilenceMs);
            callEstablishConnectionRequest.fromNumber(this.fromNumber);
            callEstablishConnectionRequest.toNumber(this.toNumber);
            callEstablishConnectionRequest.metadata(this.metadata);
            callEstablishConnectionRequest.retellLlmDynamicVariables(this.retellLlmDynamicVariables);
            return callEstablishConnectionRequest;
        }

        /**
         * Execute establishConnection request
         * @return CallBase
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully registered a call. </td><td>  -  </td></tr>
         </table>
         */
        public CallBase execute() throws ApiException {
            CallEstablishConnectionRequest callEstablishConnectionRequest = buildBodyParams();
            ApiResponse<CallBase> localVarResp = establishConnectionWithHttpInfo(callEstablishConnectionRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute establishConnection request with HTTP info returned
         * @return ApiResponse&lt;CallBase&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully registered a call. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CallBase> executeWithHttpInfo() throws ApiException {
            CallEstablishConnectionRequest callEstablishConnectionRequest = buildBodyParams();
            return establishConnectionWithHttpInfo(callEstablishConnectionRequest);
        }

        /**
         * Execute establishConnection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully registered a call. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CallBase> _callback) throws ApiException {
            CallEstablishConnectionRequest callEstablishConnectionRequest = buildBodyParams();
            return establishConnectionAsync(callEstablishConnectionRequest, _callback);
        }
    }

    /**
     * 
     * Register Call To Get CallId To Establish Connection
     * @param callEstablishConnectionRequest  (required)
     * @return EstablishConnectionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully registered a call. </td><td>  -  </td></tr>
     </table>
     */
    public EstablishConnectionRequestBuilder establishConnection(String agentId, String audioWebsocketProtocol, String audioEncoding, Integer sampleRate) throws IllegalArgumentException {
        if (agentId == null) throw new IllegalArgumentException("\"agentId\" is required but got null");
            

        if (audioWebsocketProtocol == null) throw new IllegalArgumentException("\"audioWebsocketProtocol\" is required but got null");
            

        if (audioEncoding == null) throw new IllegalArgumentException("\"audioEncoding\" is required but got null");
            

        if (sampleRate == null) throw new IllegalArgumentException("\"sampleRate\" is required but got null");
        return new EstablishConnectionRequestBuilder(agentId, audioWebsocketProtocol, audioEncoding, sampleRate);
    }
    private okhttp3.Call getDetailsCall(String callId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/get-call/{call_id}"
            .replace("{" + "call_id" + "}", localVarApiClient.escapeString(callId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailsValidateBeforeCall(String callId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'callId' is set
        if (callId == null) {
            throw new ApiException("Missing the required parameter 'callId' when calling getDetails(Async)");
        }

        return getDetailsCall(callId, _callback);

    }


    private ApiResponse<CallDetail> getDetailsWithHttpInfo(String callId) throws ApiException {
        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(callId, null);
        Type localVarReturnType = new TypeToken<CallDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetailsAsync(String callId, final ApiCallback<CallDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(callId, _callback);
        Type localVarReturnType = new TypeToken<CallDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetailsRequestBuilder {
        private final String callId;

        private GetDetailsRequestBuilder(String callId) {
            this.callId = callId;
        }

        /**
         * Build call for getDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved an agent. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetailsCall(callId, _callback);
        }


        /**
         * Execute getDetails request
         * @return CallDetail
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved an agent. </td><td>  -  </td></tr>
         </table>
         */
        public CallDetail execute() throws ApiException {
            ApiResponse<CallDetail> localVarResp = getDetailsWithHttpInfo(callId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetails request with HTTP info returned
         * @return ApiResponse&lt;CallDetail&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved an agent. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CallDetail> executeWithHttpInfo() throws ApiException {
            return getDetailsWithHttpInfo(callId);
        }

        /**
         * Execute getDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved an agent. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CallDetail> _callback) throws ApiException {
            return getDetailsAsync(callId, _callback);
        }
    }

    /**
     * 
     * Retrieve details of a specific call
     * @param callId The call id to retrieve call history for. (required)
     * @return GetDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved an agent. </td><td>  -  </td></tr>
     </table>
     */
    public GetDetailsRequestBuilder getDetails(String callId) throws IllegalArgumentException {
        if (callId == null) throw new IllegalArgumentException("\"callId\" is required but got null");
            

        return new GetDetailsRequestBuilder(callId);
    }
    private okhttp3.Call getDetails_0Call(CallGetDetailsFilterCriteriaParameter filterCriteria, String sortOrder, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/list-calls";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterCriteria != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_criteria", filterCriteria));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetails_0ValidateBeforeCall(CallGetDetailsFilterCriteriaParameter filterCriteria, String sortOrder, Integer limit, final ApiCallback _callback) throws ApiException {
        return getDetails_0Call(filterCriteria, sortOrder, limit, _callback);

    }


    private ApiResponse<List<CallDetail>> getDetails_0WithHttpInfo(CallGetDetailsFilterCriteriaParameter filterCriteria, String sortOrder, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getDetails_0ValidateBeforeCall(filterCriteria, sortOrder, limit, null);
        Type localVarReturnType = new TypeToken<List<CallDetail>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetails_0Async(CallGetDetailsFilterCriteriaParameter filterCriteria, String sortOrder, Integer limit, final ApiCallback<List<CallDetail>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetails_0ValidateBeforeCall(filterCriteria, sortOrder, limit, _callback);
        Type localVarReturnType = new TypeToken<List<CallDetail>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetails0RequestBuilder {
        private CallGetDetailsFilterCriteriaParameter filterCriteria;
        private String sortOrder;
        private Integer limit;

        private GetDetails0RequestBuilder() {
        }

        /**
         * Set filterCriteria
         * @param filterCriteria  (optional)
         * @return GetDetails0RequestBuilder
         */
        public GetDetails0RequestBuilder filterCriteria(CallGetDetailsFilterCriteriaParameter filterCriteria) {
            this.filterCriteria = filterCriteria;
            return this;
        }
        
        /**
         * Set sortOrder
         * @param sortOrder The calls will be sorted by &#x60;start_timestamp&#x60;, whether to return the calls in ascending or descending order. (optional, default to descending)
         * @return GetDetails0RequestBuilder
         */
        public GetDetails0RequestBuilder sortOrder(String sortOrder) {
            this.sortOrder = sortOrder;
            return this;
        }
        
        /**
         * Set limit
         * @param limit Limit the number of calls returned. (optional, default to 1000)
         * @return GetDetails0RequestBuilder
         */
        public GetDetails0RequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Build call for getDetails_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved all agents. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetails_0Call(filterCriteria, sortOrder, limit, _callback);
        }


        /**
         * Execute getDetails_0 request
         * @return List&lt;CallDetail&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved all agents. </td><td>  -  </td></tr>
         </table>
         */
        public List<CallDetail> execute() throws ApiException {
            ApiResponse<List<CallDetail>> localVarResp = getDetails_0WithHttpInfo(filterCriteria, sortOrder, limit);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetails_0 request with HTTP info returned
         * @return ApiResponse&lt;List&lt;CallDetail&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved all agents. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<CallDetail>> executeWithHttpInfo() throws ApiException {
            return getDetails_0WithHttpInfo(filterCriteria, sortOrder, limit);
        }

        /**
         * Execute getDetails_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved all agents. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<CallDetail>> _callback) throws ApiException {
            return getDetails_0Async(filterCriteria, sortOrder, limit, _callback);
        }
    }

    /**
     * 
     * Retrieve call details
     * @return GetDetails0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved all agents. </td><td>  -  </td></tr>
     </table>
     */
    public GetDetails0RequestBuilder getDetails_0() throws IllegalArgumentException {
        return new GetDetails0RequestBuilder();
    }
    private okhttp3.Call makeConnectionCall(CallMakeConnectionRequest callMakeConnectionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = callMakeConnectionRequest;

        // create path and map variables
        String localVarPath = "/create-phone-call";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call makeConnectionValidateBeforeCall(CallMakeConnectionRequest callMakeConnectionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'callMakeConnectionRequest' is set
        if (callMakeConnectionRequest == null) {
            throw new ApiException("Missing the required parameter 'callMakeConnectionRequest' when calling makeConnection(Async)");
        }

        return makeConnectionCall(callMakeConnectionRequest, _callback);

    }


    private ApiResponse<CallBase> makeConnectionWithHttpInfo(CallMakeConnectionRequest callMakeConnectionRequest) throws ApiException {
        okhttp3.Call localVarCall = makeConnectionValidateBeforeCall(callMakeConnectionRequest, null);
        Type localVarReturnType = new TypeToken<CallBase>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call makeConnectionAsync(CallMakeConnectionRequest callMakeConnectionRequest, final ApiCallback<CallBase> _callback) throws ApiException {

        okhttp3.Call localVarCall = makeConnectionValidateBeforeCall(callMakeConnectionRequest, _callback);
        Type localVarReturnType = new TypeToken<CallBase>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class MakeConnectionRequestBuilder {
        private final CallMakeConnectionRequestPhoneNumber phoneNumber;
        private String overrideAgentId;
        private Map<String, Object> retellLlmDynamicVariables;

        private MakeConnectionRequestBuilder(CallMakeConnectionRequestPhoneNumber phoneNumber) {
            this.phoneNumber = phoneNumber;
        }

        /**
         * Set overrideAgentId
         * @param overrideAgentId For this particular call, override the agent used with this agent id. This does not bind the agent to this number, this is for one time override. (optional)
         * @return MakeConnectionRequestBuilder
         */
        public MakeConnectionRequestBuilder overrideAgentId(String overrideAgentId) {
            this.overrideAgentId = overrideAgentId;
            return this;
        }
        
        /**
         * Set retellLlmDynamicVariables
         * @param retellLlmDynamicVariables Add optional dynamic variables in key value pairs of string that injects into your Retell LLM prompt and tool description. Only applicable for Retell LLM. (optional)
         * @return MakeConnectionRequestBuilder
         */
        public MakeConnectionRequestBuilder retellLlmDynamicVariables(Map<String, Object> retellLlmDynamicVariables) {
            this.retellLlmDynamicVariables = retellLlmDynamicVariables;
            return this;
        }
        
        /**
         * Build call for makeConnection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully made an outbound call. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CallMakeConnectionRequest callMakeConnectionRequest = buildBodyParams();
            return makeConnectionCall(callMakeConnectionRequest, _callback);
        }

        private CallMakeConnectionRequest buildBodyParams() {
            CallMakeConnectionRequest callMakeConnectionRequest = new CallMakeConnectionRequest();
            callMakeConnectionRequest.phoneNumber(this.phoneNumber);
            callMakeConnectionRequest.overrideAgentId(this.overrideAgentId);
            callMakeConnectionRequest.retellLlmDynamicVariables(this.retellLlmDynamicVariables);
            return callMakeConnectionRequest;
        }

        /**
         * Execute makeConnection request
         * @return CallBase
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully made an outbound call. </td><td>  -  </td></tr>
         </table>
         */
        public CallBase execute() throws ApiException {
            CallMakeConnectionRequest callMakeConnectionRequest = buildBodyParams();
            ApiResponse<CallBase> localVarResp = makeConnectionWithHttpInfo(callMakeConnectionRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute makeConnection request with HTTP info returned
         * @return ApiResponse&lt;CallBase&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully made an outbound call. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CallBase> executeWithHttpInfo() throws ApiException {
            CallMakeConnectionRequest callMakeConnectionRequest = buildBodyParams();
            return makeConnectionWithHttpInfo(callMakeConnectionRequest);
        }

        /**
         * Execute makeConnection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully made an outbound call. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CallBase> _callback) throws ApiException {
            CallMakeConnectionRequest callMakeConnectionRequest = buildBodyParams();
            return makeConnectionAsync(callMakeConnectionRequest, _callback);
        }
    }

    /**
     * 
     * Create a new phone call
     * @param callMakeConnectionRequest  (required)
     * @return MakeConnectionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully made an outbound call. </td><td>  -  </td></tr>
     </table>
     */
    public MakeConnectionRequestBuilder makeConnection(CallMakeConnectionRequestPhoneNumber phoneNumber) throws IllegalArgumentException {
        if (phoneNumber == null) throw new IllegalArgumentException("\"phoneNumber\" is required but got null");
        return new MakeConnectionRequestBuilder(phoneNumber);
    }
}
