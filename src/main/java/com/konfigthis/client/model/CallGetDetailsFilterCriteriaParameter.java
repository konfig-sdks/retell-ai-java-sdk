/*
 * Retell SDK
 * API for voice AI. Effortlessly integrate human-like Voice AI into your product. | We are building an API that enables your product to provide an intuitive and engaging way for user interaction - through voice.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@retellai.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CallGetDetailsFilterCriteriaParameter
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CallGetDetailsFilterCriteriaParameter {
  public static final String SERIALIZED_NAME_AGENT_ID = "agent_id";
  @SerializedName(SERIALIZED_NAME_AGENT_ID)
  private List<String> agentId = null;

  public static final String SERIALIZED_NAME_BEFORE_START_TIMESTAMP = "before_start_timestamp";
  @SerializedName(SERIALIZED_NAME_BEFORE_START_TIMESTAMP)
  private Integer beforeStartTimestamp;

  public static final String SERIALIZED_NAME_AFTER_START_TIMESTAMP = "after_start_timestamp";
  @SerializedName(SERIALIZED_NAME_AFTER_START_TIMESTAMP)
  private Integer afterStartTimestamp;

  public static final String SERIALIZED_NAME_BEFORE_END_TIMESTAMP = "before_end_timestamp";
  @SerializedName(SERIALIZED_NAME_BEFORE_END_TIMESTAMP)
  private Integer beforeEndTimestamp;

  public static final String SERIALIZED_NAME_AFTER_END_TIMESTAMP = "after_end_timestamp";
  @SerializedName(SERIALIZED_NAME_AFTER_END_TIMESTAMP)
  private Integer afterEndTimestamp;

  public CallGetDetailsFilterCriteriaParameter() {
  }

  public CallGetDetailsFilterCriteriaParameter agentId(List<String> agentId) {
    
    
    
    
    this.agentId = agentId;
    return this;
  }

  public CallGetDetailsFilterCriteriaParameter addAgentIdItem(String agentIdItem) {
    if (this.agentId == null) {
      this.agentId = new ArrayList<>();
    }
    this.agentId.add(agentIdItem);
    return this;
  }

   /**
   * Only retrieve calls that are made with specific agent(s).
   * @return agentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[\"oBeDLoLOeuAbiuaMFXRtDOLriTJ5tSxD\"]", value = "Only retrieve calls that are made with specific agent(s).")

  public List<String> getAgentId() {
    return agentId;
  }


  public void setAgentId(List<String> agentId) {
    
    
    
    this.agentId = agentId;
  }


  public CallGetDetailsFilterCriteriaParameter beforeStartTimestamp(Integer beforeStartTimestamp) {
    
    
    
    
    this.beforeStartTimestamp = beforeStartTimestamp;
    return this;
  }

   /**
   * Exclusive. Filter calls that start before this timestamp.
   * @return beforeStartTimestamp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1703302407399", value = "Exclusive. Filter calls that start before this timestamp.")

  public Integer getBeforeStartTimestamp() {
    return beforeStartTimestamp;
  }


  public void setBeforeStartTimestamp(Integer beforeStartTimestamp) {
    
    
    
    this.beforeStartTimestamp = beforeStartTimestamp;
  }


  public CallGetDetailsFilterCriteriaParameter afterStartTimestamp(Integer afterStartTimestamp) {
    
    
    
    
    this.afterStartTimestamp = afterStartTimestamp;
    return this;
  }

   /**
   * Inclusive. Filter calls that start on or after this timestamp.
   * @return afterStartTimestamp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1703302407300", value = "Inclusive. Filter calls that start on or after this timestamp.")

  public Integer getAfterStartTimestamp() {
    return afterStartTimestamp;
  }


  public void setAfterStartTimestamp(Integer afterStartTimestamp) {
    
    
    
    this.afterStartTimestamp = afterStartTimestamp;
  }


  public CallGetDetailsFilterCriteriaParameter beforeEndTimestamp(Integer beforeEndTimestamp) {
    
    
    
    
    this.beforeEndTimestamp = beforeEndTimestamp;
    return this;
  }

   /**
   * Exclusive. Filter calls that end before this timestamp.
   * @return beforeEndTimestamp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1703302428899", value = "Exclusive. Filter calls that end before this timestamp.")

  public Integer getBeforeEndTimestamp() {
    return beforeEndTimestamp;
  }


  public void setBeforeEndTimestamp(Integer beforeEndTimestamp) {
    
    
    
    this.beforeEndTimestamp = beforeEndTimestamp;
  }


  public CallGetDetailsFilterCriteriaParameter afterEndTimestamp(Integer afterEndTimestamp) {
    
    
    
    
    this.afterEndTimestamp = afterEndTimestamp;
    return this;
  }

   /**
   * Inclusive. Filter calls that end on or after this timestamp.
   * @return afterEndTimestamp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1703302428800", value = "Inclusive. Filter calls that end on or after this timestamp.")

  public Integer getAfterEndTimestamp() {
    return afterEndTimestamp;
  }


  public void setAfterEndTimestamp(Integer afterEndTimestamp) {
    
    
    
    this.afterEndTimestamp = afterEndTimestamp;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CallGetDetailsFilterCriteriaParameter instance itself
   */
  public CallGetDetailsFilterCriteriaParameter putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CallGetDetailsFilterCriteriaParameter callGetDetailsFilterCriteriaParameter = (CallGetDetailsFilterCriteriaParameter) o;
    return Objects.equals(this.agentId, callGetDetailsFilterCriteriaParameter.agentId) &&
        Objects.equals(this.beforeStartTimestamp, callGetDetailsFilterCriteriaParameter.beforeStartTimestamp) &&
        Objects.equals(this.afterStartTimestamp, callGetDetailsFilterCriteriaParameter.afterStartTimestamp) &&
        Objects.equals(this.beforeEndTimestamp, callGetDetailsFilterCriteriaParameter.beforeEndTimestamp) &&
        Objects.equals(this.afterEndTimestamp, callGetDetailsFilterCriteriaParameter.afterEndTimestamp)&&
        Objects.equals(this.additionalProperties, callGetDetailsFilterCriteriaParameter.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agentId, beforeStartTimestamp, afterStartTimestamp, beforeEndTimestamp, afterEndTimestamp, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CallGetDetailsFilterCriteriaParameter {\n");
    sb.append("    agentId: ").append(toIndentedString(agentId)).append("\n");
    sb.append("    beforeStartTimestamp: ").append(toIndentedString(beforeStartTimestamp)).append("\n");
    sb.append("    afterStartTimestamp: ").append(toIndentedString(afterStartTimestamp)).append("\n");
    sb.append("    beforeEndTimestamp: ").append(toIndentedString(beforeEndTimestamp)).append("\n");
    sb.append("    afterEndTimestamp: ").append(toIndentedString(afterEndTimestamp)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("agent_id");
    openapiFields.add("before_start_timestamp");
    openapiFields.add("after_start_timestamp");
    openapiFields.add("before_end_timestamp");
    openapiFields.add("after_end_timestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CallGetDetailsFilterCriteriaParameter
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CallGetDetailsFilterCriteriaParameter.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CallGetDetailsFilterCriteriaParameter is not found in the empty JSON string", CallGetDetailsFilterCriteriaParameter.openapiRequiredFields.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("agent_id") != null && !jsonObj.get("agent_id").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `agent_id` to be an array in the JSON string but got `%s`", jsonObj.get("agent_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CallGetDetailsFilterCriteriaParameter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CallGetDetailsFilterCriteriaParameter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CallGetDetailsFilterCriteriaParameter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CallGetDetailsFilterCriteriaParameter.class));

       return (TypeAdapter<T>) new TypeAdapter<CallGetDetailsFilterCriteriaParameter>() {
           @Override
           public void write(JsonWriter out, CallGetDetailsFilterCriteriaParameter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CallGetDetailsFilterCriteriaParameter read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CallGetDetailsFilterCriteriaParameter instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CallGetDetailsFilterCriteriaParameter given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CallGetDetailsFilterCriteriaParameter
  * @throws IOException if the JSON string is invalid with respect to CallGetDetailsFilterCriteriaParameter
  */
  public static CallGetDetailsFilterCriteriaParameter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CallGetDetailsFilterCriteriaParameter.class);
  }

 /**
  * Convert an instance of CallGetDetailsFilterCriteriaParameter to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

