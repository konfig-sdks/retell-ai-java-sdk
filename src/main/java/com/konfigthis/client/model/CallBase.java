/*
 * Retell SDK
 * API for voice AI. Effortlessly integrate human-like Voice AI into your product. | We are building an API that enables your product to provide an intuitive and engaging way for user interaction - through voice.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@retellai.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CallBase
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CallBase {
  public static final String SERIALIZED_NAME_CALL_ID = "call_id";
  @SerializedName(SERIALIZED_NAME_CALL_ID)
  private String callId;

  public static final String SERIALIZED_NAME_AGENT_ID = "agent_id";
  @SerializedName(SERIALIZED_NAME_AGENT_ID)
  private String agentId;

  /**
   * Where the audio websocket would connect from would determine the format / protocol of websocket messages, and would determine how our server read audio bytes and send audio bytes.:  - &#x60;web&#x60;: The protocol defined by Retell, commonly used for connecting from web frontend. Also useful for those who want to manipulate audio bytes directly.  - &#x60;twilio&#x60;: The [websocket protocol](https://www.twilio.com/docs/voice/twiml/stream#message-media) defined by Twilio, used when your system uses Twilio, and supplies Retell audio websocket url to Twilio.
   */
  @JsonAdapter(AudioWebsocketProtocolEnum.Adapter.class)
 public enum AudioWebsocketProtocolEnum {
    WEB("web"),
    
    TWILIO("twilio");

    private String value;

    AudioWebsocketProtocolEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AudioWebsocketProtocolEnum fromValue(String value) {
      for (AudioWebsocketProtocolEnum b : AudioWebsocketProtocolEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AudioWebsocketProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AudioWebsocketProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AudioWebsocketProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AudioWebsocketProtocolEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_AUDIO_WEBSOCKET_PROTOCOL = "audio_websocket_protocol";
  @SerializedName(SERIALIZED_NAME_AUDIO_WEBSOCKET_PROTOCOL)
  private AudioWebsocketProtocolEnum audioWebsocketProtocol;

  /**
   * The audio encoding of the call. The following formats are supported:   - &#x60;s16le&#x60; 16 bit linear PCM audio, the native format for web audio capture and playback.  - &#x60;mulaw&#x60; non-linear audio encoding technique used in telephony. Commonly used by Twilio.
   */
  @JsonAdapter(AudioEncodingEnum.Adapter.class)
 public enum AudioEncodingEnum {
    S16LE("s16le"),
    
    MULAW("mulaw");

    private String value;

    AudioEncodingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AudioEncodingEnum fromValue(String value) {
      for (AudioEncodingEnum b : AudioEncodingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AudioEncodingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AudioEncodingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AudioEncodingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AudioEncodingEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_AUDIO_ENCODING = "audio_encoding";
  @SerializedName(SERIALIZED_NAME_AUDIO_ENCODING)
  private AudioEncodingEnum audioEncoding;

  public static final String SERIALIZED_NAME_SAMPLE_RATE = "sample_rate";
  @SerializedName(SERIALIZED_NAME_SAMPLE_RATE)
  private Integer sampleRate;

  /**
   * Status of call.  - &#x60;registered&#x60;: Call id issued, ready to make a call using this id.  - &#x60;ongoing&#x60;: Call connected and ongoing.  - &#x60;ended&#x60;: The underlying websocket has ended for the call. Either user or agent hanged up, or call transferred.   - &#x60;error&#x60;: Call encountered error.
   */
  @JsonAdapter(CallStatusEnum.Adapter.class)
 public enum CallStatusEnum {
    REGISTERED("registered"),
    
    ONGOING("ongoing"),
    
    ENDED("ended"),
    
    ERROR("error");

    private String value;

    CallStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CallStatusEnum fromValue(String value) {
      for (CallStatusEnum b : CallStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CallStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CallStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CallStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CallStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CALL_STATUS = "call_status";
  @SerializedName(SERIALIZED_NAME_CALL_STATUS)
  private CallStatusEnum callStatus;

  public static final String SERIALIZED_NAME_START_TIMESTAMP = "start_timestamp";
  @SerializedName(SERIALIZED_NAME_START_TIMESTAMP)
  private Integer startTimestamp;

  public static final String SERIALIZED_NAME_END_CALL_AFTER_SILENCE_MS = "end_call_after_silence_ms";
  @SerializedName(SERIALIZED_NAME_END_CALL_AFTER_SILENCE_MS)
  private Integer endCallAfterSilenceMs;

  public static final String SERIALIZED_NAME_FROM_NUMBER = "from_number";
  @SerializedName(SERIALIZED_NAME_FROM_NUMBER)
  private String fromNumber;

  public static final String SERIALIZED_NAME_TO_NUMBER = "to_number";
  @SerializedName(SERIALIZED_NAME_TO_NUMBER)
  private String toNumber;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Object metadata;

  public static final String SERIALIZED_NAME_RETELL_LLM_DYNAMIC_VARIABLES = "retell_llm_dynamic_variables";
  @SerializedName(SERIALIZED_NAME_RETELL_LLM_DYNAMIC_VARIABLES)
  private Map<String, Object> retellLlmDynamicVariables = null;

  public CallBase() {
  }

  public CallBase callId(String callId) {
    
    
    
    
    this.callId = callId;
    return this;
  }

   /**
   * Unique id of the call. Used to identify in LLM websocket and used to authenticate in audio websocket.
   * @return callId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Jabr9TXYYJHfvl6Syypi88rdAHYHmcq6", required = true, value = "Unique id of the call. Used to identify in LLM websocket and used to authenticate in audio websocket.")

  public String getCallId() {
    return callId;
  }


  public void setCallId(String callId) {
    
    
    
    this.callId = callId;
  }


  public CallBase agentId(String agentId) {
    
    
    
    
    this.agentId = agentId;
    return this;
  }

   /**
   * Corresponding agent id of this call.
   * @return agentId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "oBeDLoLOeuAbiuaMFXRtDOLriTJ5tSxD", required = true, value = "Corresponding agent id of this call.")

  public String getAgentId() {
    return agentId;
  }


  public void setAgentId(String agentId) {
    
    
    
    this.agentId = agentId;
  }


  public CallBase audioWebsocketProtocol(AudioWebsocketProtocolEnum audioWebsocketProtocol) {
    
    
    
    
    this.audioWebsocketProtocol = audioWebsocketProtocol;
    return this;
  }

   /**
   * Where the audio websocket would connect from would determine the format / protocol of websocket messages, and would determine how our server read audio bytes and send audio bytes.:  - &#x60;web&#x60;: The protocol defined by Retell, commonly used for connecting from web frontend. Also useful for those who want to manipulate audio bytes directly.  - &#x60;twilio&#x60;: The [websocket protocol](https://www.twilio.com/docs/voice/twiml/stream#message-media) defined by Twilio, used when your system uses Twilio, and supplies Retell audio websocket url to Twilio.
   * @return audioWebsocketProtocol
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "TWILIO", required = true, value = "Where the audio websocket would connect from would determine the format / protocol of websocket messages, and would determine how our server read audio bytes and send audio bytes.:  - `web`: The protocol defined by Retell, commonly used for connecting from web frontend. Also useful for those who want to manipulate audio bytes directly.  - `twilio`: The [websocket protocol](https://www.twilio.com/docs/voice/twiml/stream#message-media) defined by Twilio, used when your system uses Twilio, and supplies Retell audio websocket url to Twilio.")

  public AudioWebsocketProtocolEnum getAudioWebsocketProtocol() {
    return audioWebsocketProtocol;
  }


  public void setAudioWebsocketProtocol(AudioWebsocketProtocolEnum audioWebsocketProtocol) {
    
    
    
    this.audioWebsocketProtocol = audioWebsocketProtocol;
  }


  public CallBase audioEncoding(AudioEncodingEnum audioEncoding) {
    
    
    
    
    this.audioEncoding = audioEncoding;
    return this;
  }

   /**
   * The audio encoding of the call. The following formats are supported:   - &#x60;s16le&#x60; 16 bit linear PCM audio, the native format for web audio capture and playback.  - &#x60;mulaw&#x60; non-linear audio encoding technique used in telephony. Commonly used by Twilio.
   * @return audioEncoding
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "S16LE", required = true, value = "The audio encoding of the call. The following formats are supported:   - `s16le` 16 bit linear PCM audio, the native format for web audio capture and playback.  - `mulaw` non-linear audio encoding technique used in telephony. Commonly used by Twilio.")

  public AudioEncodingEnum getAudioEncoding() {
    return audioEncoding;
  }


  public void setAudioEncoding(AudioEncodingEnum audioEncoding) {
    
    
    
    this.audioEncoding = audioEncoding;
  }


  public CallBase sampleRate(Integer sampleRate) {
    
    
    
    
    this.sampleRate = sampleRate;
    return this;
  }

   /**
   * Sample rate of the conversation, the input and output audio bytes will all conform to this rate. Check the audio source, audio format, and voice used for the agent to select one that works. supports value ranging from [8000, 48000]. Note for Twilio &#x60;mulaw&#x60; encoding, the sample rate has to be 8000.  - &#x60;s16le&#x60; sample rate recommendation (natively supported, lowest latency):    - elevenlabs voices: 16000, 22050, 24000, 44100.   - openai voices: 24000.    - deepgram voices: 8000, 16000, 24000, 32000, 48000.
   * @return sampleRate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "24000", required = true, value = "Sample rate of the conversation, the input and output audio bytes will all conform to this rate. Check the audio source, audio format, and voice used for the agent to select one that works. supports value ranging from [8000, 48000]. Note for Twilio `mulaw` encoding, the sample rate has to be 8000.  - `s16le` sample rate recommendation (natively supported, lowest latency):    - elevenlabs voices: 16000, 22050, 24000, 44100.   - openai voices: 24000.    - deepgram voices: 8000, 16000, 24000, 32000, 48000.")

  public Integer getSampleRate() {
    return sampleRate;
  }


  public void setSampleRate(Integer sampleRate) {
    
    
    
    this.sampleRate = sampleRate;
  }


  public CallBase callStatus(CallStatusEnum callStatus) {
    
    
    
    
    this.callStatus = callStatus;
    return this;
  }

   /**
   * Status of call.  - &#x60;registered&#x60;: Call id issued, ready to make a call using this id.  - &#x60;ongoing&#x60;: Call connected and ongoing.  - &#x60;ended&#x60;: The underlying websocket has ended for the call. Either user or agent hanged up, or call transferred.   - &#x60;error&#x60;: Call encountered error.
   * @return callStatus
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "REGISTERED", required = true, value = "Status of call.  - `registered`: Call id issued, ready to make a call using this id.  - `ongoing`: Call connected and ongoing.  - `ended`: The underlying websocket has ended for the call. Either user or agent hanged up, or call transferred.   - `error`: Call encountered error.")

  public CallStatusEnum getCallStatus() {
    return callStatus;
  }


  public void setCallStatus(CallStatusEnum callStatus) {
    
    
    
    this.callStatus = callStatus;
  }


  public CallBase startTimestamp(Integer startTimestamp) {
    
    
    
    
    this.startTimestamp = startTimestamp;
    return this;
  }

   /**
   * Begin timestamp (milliseconds since epoch) of the call.
   * @return startTimestamp
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1703302407333", required = true, value = "Begin timestamp (milliseconds since epoch) of the call.")

  public Integer getStartTimestamp() {
    return startTimestamp;
  }


  public void setStartTimestamp(Integer startTimestamp) {
    
    
    
    this.startTimestamp = startTimestamp;
  }


  public CallBase endCallAfterSilenceMs(Integer endCallAfterSilenceMs) {
    
    
    
    
    this.endCallAfterSilenceMs = endCallAfterSilenceMs;
    return this;
  }

   /**
   * If users stay silent for a period, end the call. By default, it is set to 600,000 ms (10 min). The minimum value allowed is 10,000 ms (10 s).
   * @return endCallAfterSilenceMs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "600000", value = "If users stay silent for a period, end the call. By default, it is set to 600,000 ms (10 min). The minimum value allowed is 10,000 ms (10 s).")

  public Integer getEndCallAfterSilenceMs() {
    return endCallAfterSilenceMs;
  }


  public void setEndCallAfterSilenceMs(Integer endCallAfterSilenceMs) {
    
    
    
    this.endCallAfterSilenceMs = endCallAfterSilenceMs;
  }


  public CallBase fromNumber(String fromNumber) {
    
    
    
    
    this.fromNumber = fromNumber;
    return this;
  }

   /**
   * The caller number. This field is storage purpose only, set this if you want the call object to contain it so that it&#39;s easier to reference it. Not used for processing, when we connect to your LLM websocket server, you can then get it from the call object.
   * @return fromNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "12137771234", value = "The caller number. This field is storage purpose only, set this if you want the call object to contain it so that it's easier to reference it. Not used for processing, when we connect to your LLM websocket server, you can then get it from the call object.")

  public String getFromNumber() {
    return fromNumber;
  }


  public void setFromNumber(String fromNumber) {
    
    
    
    this.fromNumber = fromNumber;
  }


  public CallBase toNumber(String toNumber) {
    
    
    
    
    this.toNumber = toNumber;
    return this;
  }

   /**
   * The callee number. This field is storage purpose only, set this if you want the call object to contain it so that it&#39;s easier to reference it. Not used for processing, when we connect to your LLM websocket server, you can then get it from the call object.
   * @return toNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "12137771235", value = "The callee number. This field is storage purpose only, set this if you want the call object to contain it so that it's easier to reference it. Not used for processing, when we connect to your LLM websocket server, you can then get it from the call object.")

  public String getToNumber() {
    return toNumber;
  }


  public void setToNumber(String toNumber) {
    
    
    
    this.toNumber = toNumber;
  }


  public CallBase metadata(Object metadata) {
    
    
    
    
    this.metadata = metadata;
    return this;
  }

   /**
   * An abtriary object for storage purpose only. You can put anything here like your own id for the call, twilio SID, internal customer id. Not used for processing, when we connect to your LLM websocket server, you can then get it from the call object.
   * @return metadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An abtriary object for storage purpose only. You can put anything here like your own id for the call, twilio SID, internal customer id. Not used for processing, when we connect to your LLM websocket server, you can then get it from the call object.")

  public Object getMetadata() {
    return metadata;
  }


  public void setMetadata(Object metadata) {
    
    
    
    this.metadata = metadata;
  }


  public CallBase retellLlmDynamicVariables(Map<String, Object> retellLlmDynamicVariables) {
    
    
    
    
    this.retellLlmDynamicVariables = retellLlmDynamicVariables;
    return this;
  }

  public CallBase putRetellLlmDynamicVariablesItem(String key, Object retellLlmDynamicVariablesItem) {
    if (this.retellLlmDynamicVariables == null) {
      this.retellLlmDynamicVariables = new HashMap<>();
    }
    this.retellLlmDynamicVariables.put(key, retellLlmDynamicVariablesItem);
    return this;
  }

   /**
   * Add optional dynamic variables in key value pairs of string that injects into your Retell LLM prompt and tool description. Only applicable for Retell LLM.
   * @return retellLlmDynamicVariables
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "{\"customer_name\":\"John Doe\"}", value = "Add optional dynamic variables in key value pairs of string that injects into your Retell LLM prompt and tool description. Only applicable for Retell LLM.")

  public Map<String, Object> getRetellLlmDynamicVariables() {
    return retellLlmDynamicVariables;
  }


  public void setRetellLlmDynamicVariables(Map<String, Object> retellLlmDynamicVariables) {
    
    
    
    this.retellLlmDynamicVariables = retellLlmDynamicVariables;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CallBase instance itself
   */
  public CallBase putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CallBase callBase = (CallBase) o;
    return Objects.equals(this.callId, callBase.callId) &&
        Objects.equals(this.agentId, callBase.agentId) &&
        Objects.equals(this.audioWebsocketProtocol, callBase.audioWebsocketProtocol) &&
        Objects.equals(this.audioEncoding, callBase.audioEncoding) &&
        Objects.equals(this.sampleRate, callBase.sampleRate) &&
        Objects.equals(this.callStatus, callBase.callStatus) &&
        Objects.equals(this.startTimestamp, callBase.startTimestamp) &&
        Objects.equals(this.endCallAfterSilenceMs, callBase.endCallAfterSilenceMs) &&
        Objects.equals(this.fromNumber, callBase.fromNumber) &&
        Objects.equals(this.toNumber, callBase.toNumber) &&
        Objects.equals(this.metadata, callBase.metadata) &&
        Objects.equals(this.retellLlmDynamicVariables, callBase.retellLlmDynamicVariables)&&
        Objects.equals(this.additionalProperties, callBase.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(callId, agentId, audioWebsocketProtocol, audioEncoding, sampleRate, callStatus, startTimestamp, endCallAfterSilenceMs, fromNumber, toNumber, metadata, retellLlmDynamicVariables, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CallBase {\n");
    sb.append("    callId: ").append(toIndentedString(callId)).append("\n");
    sb.append("    agentId: ").append(toIndentedString(agentId)).append("\n");
    sb.append("    audioWebsocketProtocol: ").append(toIndentedString(audioWebsocketProtocol)).append("\n");
    sb.append("    audioEncoding: ").append(toIndentedString(audioEncoding)).append("\n");
    sb.append("    sampleRate: ").append(toIndentedString(sampleRate)).append("\n");
    sb.append("    callStatus: ").append(toIndentedString(callStatus)).append("\n");
    sb.append("    startTimestamp: ").append(toIndentedString(startTimestamp)).append("\n");
    sb.append("    endCallAfterSilenceMs: ").append(toIndentedString(endCallAfterSilenceMs)).append("\n");
    sb.append("    fromNumber: ").append(toIndentedString(fromNumber)).append("\n");
    sb.append("    toNumber: ").append(toIndentedString(toNumber)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    retellLlmDynamicVariables: ").append(toIndentedString(retellLlmDynamicVariables)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("call_id");
    openapiFields.add("agent_id");
    openapiFields.add("audio_websocket_protocol");
    openapiFields.add("audio_encoding");
    openapiFields.add("sample_rate");
    openapiFields.add("call_status");
    openapiFields.add("start_timestamp");
    openapiFields.add("end_call_after_silence_ms");
    openapiFields.add("from_number");
    openapiFields.add("to_number");
    openapiFields.add("metadata");
    openapiFields.add("retell_llm_dynamic_variables");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("call_id");
    openapiRequiredFields.add("agent_id");
    openapiRequiredFields.add("audio_websocket_protocol");
    openapiRequiredFields.add("audio_encoding");
    openapiRequiredFields.add("sample_rate");
    openapiRequiredFields.add("call_status");
    openapiRequiredFields.add("start_timestamp");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CallBase
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CallBase.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CallBase is not found in the empty JSON string", CallBase.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CallBase.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("call_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `call_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("call_id").toString()));
      }
      if (!jsonObj.get("agent_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agent_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agent_id").toString()));
      }
      if (!jsonObj.get("audio_websocket_protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `audio_websocket_protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("audio_websocket_protocol").toString()));
      }
      if (!jsonObj.get("audio_encoding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `audio_encoding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("audio_encoding").toString()));
      }
      if (!jsonObj.get("call_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `call_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("call_status").toString()));
      }
      if ((jsonObj.get("from_number") != null && !jsonObj.get("from_number").isJsonNull()) && !jsonObj.get("from_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from_number").toString()));
      }
      if ((jsonObj.get("to_number") != null && !jsonObj.get("to_number").isJsonNull()) && !jsonObj.get("to_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `to_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("to_number").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CallBase.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CallBase' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CallBase> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CallBase.class));

       return (TypeAdapter<T>) new TypeAdapter<CallBase>() {
           @Override
           public void write(JsonWriter out, CallBase value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CallBase read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CallBase instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CallBase given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CallBase
  * @throws IOException if the JSON string is invalid with respect to CallBase
  */
  public static CallBase fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CallBase.class);
  }

 /**
  * Convert an instance of CallBase to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

