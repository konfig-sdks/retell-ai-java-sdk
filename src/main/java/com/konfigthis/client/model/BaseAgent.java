/*
 * Retell SDK
 * API for voice AI. Effortlessly integrate human-like Voice AI into your product. | We are building an API that enables your product to provide an intuitive and engaging way for user interaction - through voice.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@retellai.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * BaseAgent
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class BaseAgent {
  public static final String SERIALIZED_NAME_LLM_WEBSOCKET_URL = "llm_websocket_url";
  @SerializedName(SERIALIZED_NAME_LLM_WEBSOCKET_URL)
  private String llmWebsocketUrl;

  public static final String SERIALIZED_NAME_VOICE_ID = "voice_id";
  @SerializedName(SERIALIZED_NAME_VOICE_ID)
  private String voiceId;

  public static final String SERIALIZED_NAME_VOICE_TEMPERATURE = "voice_temperature";
  @SerializedName(SERIALIZED_NAME_VOICE_TEMPERATURE)
  private Double voiceTemperature;

  public static final String SERIALIZED_NAME_VOICE_SPEED = "voice_speed";
  @SerializedName(SERIALIZED_NAME_VOICE_SPEED)
  private Double voiceSpeed;

  public static final String SERIALIZED_NAME_RESPONSIVENESS = "responsiveness";
  @SerializedName(SERIALIZED_NAME_RESPONSIVENESS)
  private Double responsiveness;

  public static final String SERIALIZED_NAME_ENABLE_BACKCHANNEL = "enable_backchannel";
  @SerializedName(SERIALIZED_NAME_ENABLE_BACKCHANNEL)
  private Boolean enableBackchannel;

  /**
   * If set, will add ambient environment sound to the call to make experience more realistic. Currently supports the following options:  - &#x60;coffee-shop&#x60;: Coffee shop ambience with people chatting in background. [Listen to Ambience](https://retell-utils-public.s3.us-west-2.amazonaws.com/coffee-shop.wav)  - &#x60;convention-hall&#x60;: Convention hall ambience, with some echo and people chatting in background. [Listen to Ambience](https://retell-utils-public.s3.us-west-2.amazonaws.com/convention-hall.wav)  - &#x60;summer-outdoor&#x60;: Summer outdoor ambience with cicada chirping. [Listen to Ambience](https://retell-utils-public.s3.us-west-2.amazonaws.com/summer-outdoor.wav)  - &#x60;mountain-outdoor&#x60;: Mountain outdoor ambience with birds singing. [Listen to Ambience](https://retell-utils-public.s3.us-west-2.amazonaws.com/mountain-outdoor.wav)   Set to string &#x60;null&#x60; to remove ambient sound from this agent. 
   */
  @JsonAdapter(AmbientSoundEnum.Adapter.class)
 public enum AmbientSoundEnum {
    COFFEE_SHOP("coffee-shop"),
    
    CONVENTION_HALL("convention-hall"),
    
    SUMMER_OUTDOOR("summer-outdoor"),
    
    MOUNTAIN_OUTDOOR("mountain-outdoor"),
    
    NULL("null");

    private String value;

    AmbientSoundEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AmbientSoundEnum fromValue(String value) {
      for (AmbientSoundEnum b : AmbientSoundEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AmbientSoundEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AmbientSoundEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AmbientSoundEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AmbientSoundEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_AMBIENT_SOUND = "ambient_sound";
  @SerializedName(SERIALIZED_NAME_AMBIENT_SOUND)
  private AmbientSoundEnum ambientSound;

  public static final String SERIALIZED_NAME_AGENT_NAME = "agent_name";
  @SerializedName(SERIALIZED_NAME_AGENT_NAME)
  private String agentName;

  /**
   * &#x60;Beta feature, use with caution.&#x60;   This setting specifies the agent&#39;s operational language, including base language and dialect. Speech recognition considers both elements, but text-to-speech currently only recognizes the base language.    For instance, selecting &#x60;en-GB&#x60; optimizes speech recognition for British English, yet text-to-speech output will be in standard English. If dialect-specific text-to-speech is required, please contact us for support.   - &#x60;11lab voices&#x60;: supports English(en), German(de), Spanish(es), Hindi(hi), Portuguese(pt)   - &#x60;openAI voices&#x60;: supports English(en), German(de), Spanish(es), Hindi(hi), Portuguese(pt), Japanese(ja)   - &#x60;deepgram voices&#x60;: supports English(en) 
   */
  @JsonAdapter(LanguageEnum.Adapter.class)
 public enum LanguageEnum {
    EN_US("en-US"),
    
    EN_IN("en-IN"),
    
    EN_GB("en-GB"),
    
    DE_DE("de-DE"),
    
    ES_ES("es-ES"),
    
    ES_419("es-419"),
    
    HI_IN("hi-IN"),
    
    JA_JP("ja-JP"),
    
    PT_PT("pt-PT"),
    
    PT_BR("pt-BR");

    private String value;

    LanguageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LanguageEnum fromValue(String value) {
      for (LanguageEnum b : LanguageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LanguageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LanguageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LanguageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LanguageEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private LanguageEnum language;

  public static final String SERIALIZED_NAME_WEBHOOK_URL = "webhook_url";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_URL)
  private String webhookUrl;

  public static final String SERIALIZED_NAME_BOOSTED_KEYWORDS = "boosted_keywords";
  @SerializedName(SERIALIZED_NAME_BOOSTED_KEYWORDS)
  private List<String> boostedKeywords = null;

  public static final String SERIALIZED_NAME_FORMAT_TEXT = "format_text";
  @SerializedName(SERIALIZED_NAME_FORMAT_TEXT)
  private Boolean formatText;

  public static final String SERIALIZED_NAME_OPT_OUT_SENSITIVE_DATA_STORAGE = "optOutSensitiveDataStorage";
  @SerializedName(SERIALIZED_NAME_OPT_OUT_SENSITIVE_DATA_STORAGE)
  private Boolean optOutSensitiveDataStorage;

  public BaseAgent() {
  }

  public BaseAgent llmWebsocketUrl(String llmWebsocketUrl) {
    
    
    
    
    this.llmWebsocketUrl = llmWebsocketUrl;
    return this;
  }

   /**
   * The URL we will establish LLM websocket for getting response, usually your server. Check out [LLM WebSocket](https://raw.githubusercontent.com) for more about request format (sent from us) and response format (send to us).
   * @return llmWebsocketUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "wss://your-websocket-endpoint", value = "The URL we will establish LLM websocket for getting response, usually your server. Check out [LLM WebSocket](https://raw.githubusercontent.com) for more about request format (sent from us) and response format (send to us).")

  public String getLlmWebsocketUrl() {
    return llmWebsocketUrl;
  }


  public void setLlmWebsocketUrl(String llmWebsocketUrl) {
    
    
    
    this.llmWebsocketUrl = llmWebsocketUrl;
  }


  public BaseAgent voiceId(String voiceId) {
    
    
    
    
    this.voiceId = voiceId;
    return this;
  }

   /**
   * Unique voice id used for the agent. Find list of available voices and their preview in Dashboard.
   * @return voiceId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "11labs-Adrian", value = "Unique voice id used for the agent. Find list of available voices and their preview in Dashboard.")

  public String getVoiceId() {
    return voiceId;
  }


  public void setVoiceId(String voiceId) {
    
    
    
    this.voiceId = voiceId;
  }


  public BaseAgent voiceTemperature(Double voiceTemperature) {
    
    
    
    
    this.voiceTemperature = voiceTemperature;
    return this;
  }

  public BaseAgent voiceTemperature(Integer voiceTemperature) {
    
    
    
    
    this.voiceTemperature = voiceTemperature.doubleValue();
    return this;
  }

   /**
   * Controls how stable the voice is. Value ranging from [0,2]. Lower value means more stable, and higher value means more variant speech generation. Currently this setting only applies to &#x60;11labs&#x60; voices. If unset, default value 1 will apply.
   * @return voiceTemperature
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "Controls how stable the voice is. Value ranging from [0,2]. Lower value means more stable, and higher value means more variant speech generation. Currently this setting only applies to `11labs` voices. If unset, default value 1 will apply.")

  public Double getVoiceTemperature() {
    return voiceTemperature;
  }


  public void setVoiceTemperature(Double voiceTemperature) {
    
    
    
    this.voiceTemperature = voiceTemperature;
  }


  public BaseAgent voiceSpeed(Double voiceSpeed) {
    
    
    
    
    this.voiceSpeed = voiceSpeed;
    return this;
  }

  public BaseAgent voiceSpeed(Integer voiceSpeed) {
    
    
    
    
    this.voiceSpeed = voiceSpeed.doubleValue();
    return this;
  }

   /**
   * Controls speed of voice. Value ranging from [0.5,2]. Lower value means slower speech, while higher value means faster speech rate. If unset, default value 1 will apply.
   * @return voiceSpeed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "Controls speed of voice. Value ranging from [0.5,2]. Lower value means slower speech, while higher value means faster speech rate. If unset, default value 1 will apply.")

  public Double getVoiceSpeed() {
    return voiceSpeed;
  }


  public void setVoiceSpeed(Double voiceSpeed) {
    
    
    
    this.voiceSpeed = voiceSpeed;
  }


  public BaseAgent responsiveness(Double responsiveness) {
    
    
    
    
    this.responsiveness = responsiveness;
    return this;
  }

  public BaseAgent responsiveness(Integer responsiveness) {
    
    
    
    
    this.responsiveness = responsiveness.doubleValue();
    return this;
  }

   /**
   * Controls how responsive is the agent. Value ranging from [0,1]. Lower value means less responsive agent (wait more, respond slower), while higher value means faster exchanges (respond when it can). If unset, default value 1 will apply.
   * @return responsiveness
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "Controls how responsive is the agent. Value ranging from [0,1]. Lower value means less responsive agent (wait more, respond slower), while higher value means faster exchanges (respond when it can). If unset, default value 1 will apply.")

  public Double getResponsiveness() {
    return responsiveness;
  }


  public void setResponsiveness(Double responsiveness) {
    
    
    
    this.responsiveness = responsiveness;
  }


  public BaseAgent enableBackchannel(Boolean enableBackchannel) {
    
    
    
    
    this.enableBackchannel = enableBackchannel;
    return this;
  }

   /**
   * Controls whether the agent would backchannel (agent interjects the speaker with phrases like \&quot;yeah\&quot;, \&quot;uh-huh\&quot; to signify interest and engagement). Backchannel when enabled tends to show up more in longer user utterances. If not set, agent will not backchannel.
   * @return enableBackchannel
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Controls whether the agent would backchannel (agent interjects the speaker with phrases like \"yeah\", \"uh-huh\" to signify interest and engagement). Backchannel when enabled tends to show up more in longer user utterances. If not set, agent will not backchannel.")

  public Boolean getEnableBackchannel() {
    return enableBackchannel;
  }


  public void setEnableBackchannel(Boolean enableBackchannel) {
    
    
    
    this.enableBackchannel = enableBackchannel;
  }


  public BaseAgent ambientSound(AmbientSoundEnum ambientSound) {
    
    
    
    
    this.ambientSound = ambientSound;
    return this;
  }

   /**
   * If set, will add ambient environment sound to the call to make experience more realistic. Currently supports the following options:  - &#x60;coffee-shop&#x60;: Coffee shop ambience with people chatting in background. [Listen to Ambience](https://retell-utils-public.s3.us-west-2.amazonaws.com/coffee-shop.wav)  - &#x60;convention-hall&#x60;: Convention hall ambience, with some echo and people chatting in background. [Listen to Ambience](https://retell-utils-public.s3.us-west-2.amazonaws.com/convention-hall.wav)  - &#x60;summer-outdoor&#x60;: Summer outdoor ambience with cicada chirping. [Listen to Ambience](https://retell-utils-public.s3.us-west-2.amazonaws.com/summer-outdoor.wav)  - &#x60;mountain-outdoor&#x60;: Mountain outdoor ambience with birds singing. [Listen to Ambience](https://retell-utils-public.s3.us-west-2.amazonaws.com/mountain-outdoor.wav)   Set to string &#x60;null&#x60; to remove ambient sound from this agent. 
   * @return ambientSound
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If set, will add ambient environment sound to the call to make experience more realistic. Currently supports the following options:  - `coffee-shop`: Coffee shop ambience with people chatting in background. [Listen to Ambience](https://retell-utils-public.s3.us-west-2.amazonaws.com/coffee-shop.wav)  - `convention-hall`: Convention hall ambience, with some echo and people chatting in background. [Listen to Ambience](https://retell-utils-public.s3.us-west-2.amazonaws.com/convention-hall.wav)  - `summer-outdoor`: Summer outdoor ambience with cicada chirping. [Listen to Ambience](https://retell-utils-public.s3.us-west-2.amazonaws.com/summer-outdoor.wav)  - `mountain-outdoor`: Mountain outdoor ambience with birds singing. [Listen to Ambience](https://retell-utils-public.s3.us-west-2.amazonaws.com/mountain-outdoor.wav)   Set to string `null` to remove ambient sound from this agent. ")

  public AmbientSoundEnum getAmbientSound() {
    return ambientSound;
  }


  public void setAmbientSound(AmbientSoundEnum ambientSound) {
    
    
    
    this.ambientSound = ambientSound;
  }


  public BaseAgent agentName(String agentName) {
    
    
    
    
    this.agentName = agentName;
    return this;
  }

   /**
   * The name of the agent. Only used for your own reference.
   * @return agentName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Jarvis", value = "The name of the agent. Only used for your own reference.")

  public String getAgentName() {
    return agentName;
  }


  public void setAgentName(String agentName) {
    
    
    
    this.agentName = agentName;
  }


  public BaseAgent language(LanguageEnum language) {
    
    
    
    
    this.language = language;
    return this;
  }

   /**
   * &#x60;Beta feature, use with caution.&#x60;   This setting specifies the agent&#39;s operational language, including base language and dialect. Speech recognition considers both elements, but text-to-speech currently only recognizes the base language.    For instance, selecting &#x60;en-GB&#x60; optimizes speech recognition for British English, yet text-to-speech output will be in standard English. If dialect-specific text-to-speech is required, please contact us for support.   - &#x60;11lab voices&#x60;: supports English(en), German(de), Spanish(es), Hindi(hi), Portuguese(pt)   - &#x60;openAI voices&#x60;: supports English(en), German(de), Spanish(es), Hindi(hi), Portuguese(pt), Japanese(ja)   - &#x60;deepgram voices&#x60;: supports English(en) 
   * @return language
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "EN_US", value = "`Beta feature, use with caution.`   This setting specifies the agent's operational language, including base language and dialect. Speech recognition considers both elements, but text-to-speech currently only recognizes the base language.    For instance, selecting `en-GB` optimizes speech recognition for British English, yet text-to-speech output will be in standard English. If dialect-specific text-to-speech is required, please contact us for support.   - `11lab voices`: supports English(en), German(de), Spanish(es), Hindi(hi), Portuguese(pt)   - `openAI voices`: supports English(en), German(de), Spanish(es), Hindi(hi), Portuguese(pt), Japanese(ja)   - `deepgram voices`: supports English(en) ")

  public LanguageEnum getLanguage() {
    return language;
  }


  public void setLanguage(LanguageEnum language) {
    
    
    
    this.language = language;
  }


  public BaseAgent webhookUrl(String webhookUrl) {
    
    
    
    
    this.webhookUrl = webhookUrl;
    return this;
  }

   /**
   * The webhook for agent to listen to call events. See what events it would get at [webhook doc](https://raw.githubusercontent.com). If set, will binds webhook events for this agent to the specified url, and will ignore the account level webhook for this agent. Set to string &#x60;null&#x60; to remove webhook url from this agent.
   * @return webhookUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://webhook-url-here", value = "The webhook for agent to listen to call events. See what events it would get at [webhook doc](https://raw.githubusercontent.com). If set, will binds webhook events for this agent to the specified url, and will ignore the account level webhook for this agent. Set to string `null` to remove webhook url from this agent.")

  public String getWebhookUrl() {
    return webhookUrl;
  }


  public void setWebhookUrl(String webhookUrl) {
    
    
    
    this.webhookUrl = webhookUrl;
  }


  public BaseAgent boostedKeywords(List<String> boostedKeywords) {
    
    
    
    
    this.boostedKeywords = boostedKeywords;
    return this;
  }

  public BaseAgent addBoostedKeywordsItem(String boostedKeywordsItem) {
    if (this.boostedKeywords == null) {
      this.boostedKeywords = new ArrayList<>();
    }
    this.boostedKeywords.add(boostedKeywordsItem);
    return this;
  }

   /**
   * Provide a customized list of keywords to bias the transcriber model, so that these words are more likely to get transcribed. Commonly used for names, brands, street, etc.
   * @return boostedKeywords
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[\"retell\",\"kroger\"]", value = "Provide a customized list of keywords to bias the transcriber model, so that these words are more likely to get transcribed. Commonly used for names, brands, street, etc.")

  public List<String> getBoostedKeywords() {
    return boostedKeywords;
  }


  public void setBoostedKeywords(List<String> boostedKeywords) {
    
    
    
    this.boostedKeywords = boostedKeywords;
  }


  public BaseAgent formatText(Boolean formatText) {
    
    
    
    
    this.formatText = formatText;
    return this;
  }

   /**
   * Whether to format the transcribed text with inverse text normalization. It transforms the spoken form of text into written form for entities like phone number, email address, street address, etc. For example, \&quot;february fourth twenty twenty two\&quot; can be converted into \&quot;february 4th 2022\&quot;. If not set, the default is true.
   * @return formatText
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether to format the transcribed text with inverse text normalization. It transforms the spoken form of text into written form for entities like phone number, email address, street address, etc. For example, \"february fourth twenty twenty two\" can be converted into \"february 4th 2022\". If not set, the default is true.")

  public Boolean getFormatText() {
    return formatText;
  }


  public void setFormatText(Boolean formatText) {
    
    
    
    this.formatText = formatText;
  }


  public BaseAgent optOutSensitiveDataStorage(Boolean optOutSensitiveDataStorage) {
    
    
    
    
    this.optOutSensitiveDataStorage = optOutSensitiveDataStorage;
    return this;
  }

   /**
   * Disable transcripts and recordings storage for enhanced privacy. Access transcripts securely via webhooks.
   * @return optOutSensitiveDataStorage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Disable transcripts and recordings storage for enhanced privacy. Access transcripts securely via webhooks.")

  public Boolean getOptOutSensitiveDataStorage() {
    return optOutSensitiveDataStorage;
  }


  public void setOptOutSensitiveDataStorage(Boolean optOutSensitiveDataStorage) {
    
    
    
    this.optOutSensitiveDataStorage = optOutSensitiveDataStorage;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the BaseAgent instance itself
   */
  public BaseAgent putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BaseAgent baseAgent = (BaseAgent) o;
    return Objects.equals(this.llmWebsocketUrl, baseAgent.llmWebsocketUrl) &&
        Objects.equals(this.voiceId, baseAgent.voiceId) &&
        Objects.equals(this.voiceTemperature, baseAgent.voiceTemperature) &&
        Objects.equals(this.voiceSpeed, baseAgent.voiceSpeed) &&
        Objects.equals(this.responsiveness, baseAgent.responsiveness) &&
        Objects.equals(this.enableBackchannel, baseAgent.enableBackchannel) &&
        Objects.equals(this.ambientSound, baseAgent.ambientSound) &&
        Objects.equals(this.agentName, baseAgent.agentName) &&
        Objects.equals(this.language, baseAgent.language) &&
        Objects.equals(this.webhookUrl, baseAgent.webhookUrl) &&
        Objects.equals(this.boostedKeywords, baseAgent.boostedKeywords) &&
        Objects.equals(this.formatText, baseAgent.formatText) &&
        Objects.equals(this.optOutSensitiveDataStorage, baseAgent.optOutSensitiveDataStorage)&&
        Objects.equals(this.additionalProperties, baseAgent.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(llmWebsocketUrl, voiceId, voiceTemperature, voiceSpeed, responsiveness, enableBackchannel, ambientSound, agentName, language, webhookUrl, boostedKeywords, formatText, optOutSensitiveDataStorage, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BaseAgent {\n");
    sb.append("    llmWebsocketUrl: ").append(toIndentedString(llmWebsocketUrl)).append("\n");
    sb.append("    voiceId: ").append(toIndentedString(voiceId)).append("\n");
    sb.append("    voiceTemperature: ").append(toIndentedString(voiceTemperature)).append("\n");
    sb.append("    voiceSpeed: ").append(toIndentedString(voiceSpeed)).append("\n");
    sb.append("    responsiveness: ").append(toIndentedString(responsiveness)).append("\n");
    sb.append("    enableBackchannel: ").append(toIndentedString(enableBackchannel)).append("\n");
    sb.append("    ambientSound: ").append(toIndentedString(ambientSound)).append("\n");
    sb.append("    agentName: ").append(toIndentedString(agentName)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    webhookUrl: ").append(toIndentedString(webhookUrl)).append("\n");
    sb.append("    boostedKeywords: ").append(toIndentedString(boostedKeywords)).append("\n");
    sb.append("    formatText: ").append(toIndentedString(formatText)).append("\n");
    sb.append("    optOutSensitiveDataStorage: ").append(toIndentedString(optOutSensitiveDataStorage)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("llm_websocket_url");
    openapiFields.add("voice_id");
    openapiFields.add("voice_temperature");
    openapiFields.add("voice_speed");
    openapiFields.add("responsiveness");
    openapiFields.add("enable_backchannel");
    openapiFields.add("ambient_sound");
    openapiFields.add("agent_name");
    openapiFields.add("language");
    openapiFields.add("webhook_url");
    openapiFields.add("boosted_keywords");
    openapiFields.add("format_text");
    openapiFields.add("optOutSensitiveDataStorage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BaseAgent
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!BaseAgent.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BaseAgent is not found in the empty JSON string", BaseAgent.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("llm_websocket_url") != null && !jsonObj.get("llm_websocket_url").isJsonNull()) && !jsonObj.get("llm_websocket_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `llm_websocket_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("llm_websocket_url").toString()));
      }
      if ((jsonObj.get("voice_id") != null && !jsonObj.get("voice_id").isJsonNull()) && !jsonObj.get("voice_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `voice_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("voice_id").toString()));
      }
      if ((jsonObj.get("ambient_sound") != null && !jsonObj.get("ambient_sound").isJsonNull()) && !jsonObj.get("ambient_sound").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ambient_sound` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ambient_sound").toString()));
      }
      if ((jsonObj.get("agent_name") != null && !jsonObj.get("agent_name").isJsonNull()) && !jsonObj.get("agent_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agent_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agent_name").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if ((jsonObj.get("webhook_url") != null && !jsonObj.get("webhook_url").isJsonNull()) && !jsonObj.get("webhook_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webhook_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webhook_url").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("boosted_keywords") != null && !jsonObj.get("boosted_keywords").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `boosted_keywords` to be an array in the JSON string but got `%s`", jsonObj.get("boosted_keywords").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BaseAgent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BaseAgent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BaseAgent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BaseAgent.class));

       return (TypeAdapter<T>) new TypeAdapter<BaseAgent>() {
           @Override
           public void write(JsonWriter out, BaseAgent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public BaseAgent read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             BaseAgent instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BaseAgent given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BaseAgent
  * @throws IOException if the JSON string is invalid with respect to BaseAgent
  */
  public static BaseAgent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BaseAgent.class);
  }

 /**
  * Convert an instance of BaseAgent to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

