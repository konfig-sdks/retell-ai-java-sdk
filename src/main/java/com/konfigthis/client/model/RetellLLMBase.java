/*
 * Retell SDK
 * API for voice AI. Effortlessly integrate human-like Voice AI into your product. | We are building an API that enables your product to provide an intuitive and engaging way for user interaction - through voice.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@retellai.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.State;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * RetellLLMBase
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class RetellLLMBase {
  public static final String SERIALIZED_NAME_GENERAL_PROMPT = "general_prompt";
  @SerializedName(SERIALIZED_NAME_GENERAL_PROMPT)
  private String generalPrompt;

  public static final String SERIALIZED_NAME_GENERAL_TOOLS = "general_tools";
  @SerializedName(SERIALIZED_NAME_GENERAL_TOOLS)
  private List<Object> generalTools = null;

  public static final String SERIALIZED_NAME_STATES = "states";
  @SerializedName(SERIALIZED_NAME_STATES)
  private List<State> states = null;

  public static final String SERIALIZED_NAME_STARTING_STATE = "starting_state";
  @SerializedName(SERIALIZED_NAME_STARTING_STATE)
  private String startingState;

  public static final String SERIALIZED_NAME_BEGIN_MESSAGE = "begin_message";
  @SerializedName(SERIALIZED_NAME_BEGIN_MESSAGE)
  private String beginMessage;

  public RetellLLMBase() {
  }

  public RetellLLMBase generalPrompt(String generalPrompt) {
    
    
    
    
    this.generalPrompt = generalPrompt;
    return this;
  }

   /**
   * General prompt that&#39;s appended to system prompt no matter what state the agent is in.   - System prompt (with state) &#x3D; general prompt + state prompt.  - System prompt (no state) &#x3D; general prompt.
   * @return generalPrompt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "You are ...", value = "General prompt that's appended to system prompt no matter what state the agent is in.   - System prompt (with state) = general prompt + state prompt.  - System prompt (no state) = general prompt.")

  public String getGeneralPrompt() {
    return generalPrompt;
  }


  public void setGeneralPrompt(String generalPrompt) {
    
    
    
    this.generalPrompt = generalPrompt;
  }


  public RetellLLMBase generalTools(List<Object> generalTools) {
    
    
    
    
    this.generalTools = generalTools;
    return this;
  }

  public RetellLLMBase addGeneralToolsItem(Object generalToolsItem) {
    if (this.generalTools == null) {
      this.generalTools = new ArrayList<>();
    }
    this.generalTools.add(generalToolsItem);
    return this;
  }

   /**
   * A list of tools the model may call (to get external knowledge, call API, etc). You can select from some common predefined tools like end call, transfer call, etc; or you can create your own custom tool (last option) for the LLM to use.   - Tools of LLM (with state) &#x3D; general tools + state tools + state transitions  - Tools of LLM (no state) &#x3D; general tools
   * @return generalTools
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[{\"description\":\"End the call with user only when user explicitly requests it.\",\"type\":\"end_call\",\"name\":\"end_call\"}]", value = "A list of tools the model may call (to get external knowledge, call API, etc). You can select from some common predefined tools like end call, transfer call, etc; or you can create your own custom tool (last option) for the LLM to use.   - Tools of LLM (with state) = general tools + state tools + state transitions  - Tools of LLM (no state) = general tools")

  public List<Object> getGeneralTools() {
    return generalTools;
  }


  public void setGeneralTools(List<Object> generalTools) {
    
    
    
    this.generalTools = generalTools;
  }


  public RetellLLMBase states(List<State> states) {
    
    
    
    
    this.states = states;
    return this;
  }

  public RetellLLMBase addStatesItem(State statesItem) {
    if (this.states == null) {
      this.states = new ArrayList<>();
    }
    this.states.add(statesItem);
    return this;
  }

   /**
   * States of the LLM. This is to help reduce prompt length and tool choices when the call can be broken into distinct states. With shorter prompts and less tools, the LLM can better focus and follow the rules, minimizing hallucination. If this field is not set, the agent would only have general prompt and general tools (essentially one state).
   * @return states
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[{\"name\":\"information_collection\",\"state_prompt\":\"You will follow the steps below to collect information...\",\"edges\":[{\"description\":\"Transition to book an appointment if the user is due for an annual checkup based on the last checkup time collected.\",\"destination_state_name\":\"appointment_booking\",\"speak_during_transition\":false}],\"tools\":[{\"description\":\"Transfer to the support team when user seems angry or explicitly requests a human agent\",\"type\":\"transfer_call\",\"name\":\"transfer_to_support\",\"number\":\"16175551212\"}]},{\"name\":\"appointment_booking\",\"state_prompt\":\"You will follow the steps below to book an appointment...\",\"tools\":[{\"description\":\"Book an annual check up when user provided name, email, phone number, and have selected a time.\",\"type\":\"book_appointment_cal\",\"name\":\"book_appointment\",\"cal_api_key\":\"cal_live_xxxxxxxxxxxx\",\"event_type_id\":60444,\"timezone\":\"America/Los_Angeles\"}]}]", value = "States of the LLM. This is to help reduce prompt length and tool choices when the call can be broken into distinct states. With shorter prompts and less tools, the LLM can better focus and follow the rules, minimizing hallucination. If this field is not set, the agent would only have general prompt and general tools (essentially one state).")

  public List<State> getStates() {
    return states;
  }


  public void setStates(List<State> states) {
    
    
    
    this.states = states;
  }


  public RetellLLMBase startingState(String startingState) {
    
    
    
    
    this.startingState = startingState;
    return this;
  }

   /**
   * Name of the starting state. Required if states is not empty.
   * @return startingState
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "information_collection", value = "Name of the starting state. Required if states is not empty.")

  public String getStartingState() {
    return startingState;
  }


  public void setStartingState(String startingState) {
    
    
    
    this.startingState = startingState;
  }


  public RetellLLMBase beginMessage(String beginMessage) {
    
    
    
    
    this.beginMessage = beginMessage;
    return this;
  }

   /**
   * First utterance said by the agent in the call. If not set, LLM will dynamically generate a message. If set to \&quot;\&quot;, agent will wait for user to speak first.
   * @return beginMessage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Hey I am a virtual assistant calling from Retell Hospital.", value = "First utterance said by the agent in the call. If not set, LLM will dynamically generate a message. If set to \"\", agent will wait for user to speak first.")

  public String getBeginMessage() {
    return beginMessage;
  }


  public void setBeginMessage(String beginMessage) {
    
    
    
    this.beginMessage = beginMessage;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the RetellLLMBase instance itself
   */
  public RetellLLMBase putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RetellLLMBase retellLLMBase = (RetellLLMBase) o;
    return Objects.equals(this.generalPrompt, retellLLMBase.generalPrompt) &&
        Objects.equals(this.generalTools, retellLLMBase.generalTools) &&
        Objects.equals(this.states, retellLLMBase.states) &&
        Objects.equals(this.startingState, retellLLMBase.startingState) &&
        Objects.equals(this.beginMessage, retellLLMBase.beginMessage)&&
        Objects.equals(this.additionalProperties, retellLLMBase.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(generalPrompt, generalTools, states, startingState, beginMessage, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RetellLLMBase {\n");
    sb.append("    generalPrompt: ").append(toIndentedString(generalPrompt)).append("\n");
    sb.append("    generalTools: ").append(toIndentedString(generalTools)).append("\n");
    sb.append("    states: ").append(toIndentedString(states)).append("\n");
    sb.append("    startingState: ").append(toIndentedString(startingState)).append("\n");
    sb.append("    beginMessage: ").append(toIndentedString(beginMessage)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("general_prompt");
    openapiFields.add("general_tools");
    openapiFields.add("states");
    openapiFields.add("starting_state");
    openapiFields.add("begin_message");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RetellLLMBase
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!RetellLLMBase.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RetellLLMBase is not found in the empty JSON string", RetellLLMBase.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("general_prompt") != null && !jsonObj.get("general_prompt").isJsonNull()) && !jsonObj.get("general_prompt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `general_prompt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("general_prompt").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("general_tools") != null && !jsonObj.get("general_tools").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `general_tools` to be an array in the JSON string but got `%s`", jsonObj.get("general_tools").toString()));
      }
      if (jsonObj.get("states") != null && !jsonObj.get("states").isJsonNull()) {
        JsonArray jsonArraystates = jsonObj.getAsJsonArray("states");
        if (jsonArraystates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("states").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `states` to be an array in the JSON string but got `%s`", jsonObj.get("states").toString()));
          }

          // validate the optional field `states` (array)
          for (int i = 0; i < jsonArraystates.size(); i++) {
            State.validateJsonObject(jsonArraystates.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("starting_state") != null && !jsonObj.get("starting_state").isJsonNull()) && !jsonObj.get("starting_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `starting_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("starting_state").toString()));
      }
      if ((jsonObj.get("begin_message") != null && !jsonObj.get("begin_message").isJsonNull()) && !jsonObj.get("begin_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `begin_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("begin_message").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RetellLLMBase.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RetellLLMBase' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RetellLLMBase> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RetellLLMBase.class));

       return (TypeAdapter<T>) new TypeAdapter<RetellLLMBase>() {
           @Override
           public void write(JsonWriter out, RetellLLMBase value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public RetellLLMBase read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             RetellLLMBase instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RetellLLMBase given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RetellLLMBase
  * @throws IOException if the JSON string is invalid with respect to RetellLLMBase
  */
  public static RetellLLMBase fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RetellLLMBase.class);
  }

 /**
  * Convert an instance of RetellLLMBase to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

