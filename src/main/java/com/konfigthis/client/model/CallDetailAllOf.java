/*
 * Retell SDK
 * API for voice AI. Effortlessly integrate human-like Voice AI into your product. | We are building an API that enables your product to provide an intuitive and engaging way for user interaction - through voice.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@retellai.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.CallDetailAllOfE2eLatency;
import com.konfigthis.client.model.Utterance;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CallDetailAllOf
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CallDetailAllOf {
  public static final String SERIALIZED_NAME_END_TIMESTAMP = "end_timestamp";
  @SerializedName(SERIALIZED_NAME_END_TIMESTAMP)
  private Integer endTimestamp;

  public static final String SERIALIZED_NAME_TRANSCRIPT = "transcript";
  @SerializedName(SERIALIZED_NAME_TRANSCRIPT)
  private String transcript;

  public static final String SERIALIZED_NAME_TRANSCRIPT_OBJECT = "transcript_object";
  @SerializedName(SERIALIZED_NAME_TRANSCRIPT_OBJECT)
  private List<Utterance> transcriptObject = null;

  public static final String SERIALIZED_NAME_RECORDING_URL = "recording_url";
  @SerializedName(SERIALIZED_NAME_RECORDING_URL)
  private String recordingUrl;

  public static final String SERIALIZED_NAME_PUBLIC_LOG_URL = "public_log_url";
  @SerializedName(SERIALIZED_NAME_PUBLIC_LOG_URL)
  private String publicLogUrl;

  public static final String SERIALIZED_NAME_E2E_LATENCY = "e2e_latency";
  @SerializedName(SERIALIZED_NAME_E2E_LATENCY)
  private CallDetailAllOfE2eLatency e2eLatency;

  public CallDetailAllOf() {
  }

  public CallDetailAllOf endTimestamp(Integer endTimestamp) {
    
    
    
    
    this.endTimestamp = endTimestamp;
    return this;
  }

   /**
   * End timestamp (milliseconds since epoch) of the call. Available after call ends.
   * @return endTimestamp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1703302428855", value = "End timestamp (milliseconds since epoch) of the call. Available after call ends.")

  public Integer getEndTimestamp() {
    return endTimestamp;
  }


  public void setEndTimestamp(Integer endTimestamp) {
    
    
    
    this.endTimestamp = endTimestamp;
  }


  public CallDetailAllOf transcript(String transcript) {
    
    
    
    
    this.transcript = transcript;
    return this;
  }

   /**
   * Transcription of the call. Available after call ends.
   * @return transcript
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Agent: hi how are you doing? User: Doing pretty well. How are you? Agent: That's great to hear! I'm doing well too, thanks! What's up? User: I don't have anything in particular. Agent: Got it, just checking in! User: Alright. See you. Agent: have a nice day  ", value = "Transcription of the call. Available after call ends.")

  public String getTranscript() {
    return transcript;
  }


  public void setTranscript(String transcript) {
    
    
    
    this.transcript = transcript;
  }


  public CallDetailAllOf transcriptObject(List<Utterance> transcriptObject) {
    
    
    
    
    this.transcriptObject = transcriptObject;
    return this;
  }

  public CallDetailAllOf addTranscriptObjectItem(Utterance transcriptObjectItem) {
    if (this.transcriptObject == null) {
      this.transcriptObject = new ArrayList<>();
    }
    this.transcriptObject.add(transcriptObjectItem);
    return this;
  }

   /**
   * Transcript of the call in the format of a list of utterance, with timestamp. Available after call ends.
   * @return transcriptObject
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Transcript of the call in the format of a list of utterance, with timestamp. Available after call ends.")

  public List<Utterance> getTranscriptObject() {
    return transcriptObject;
  }


  public void setTranscriptObject(List<Utterance> transcriptObject) {
    
    
    
    this.transcriptObject = transcriptObject;
  }


  public CallDetailAllOf recordingUrl(String recordingUrl) {
    
    
    
    
    this.recordingUrl = recordingUrl;
    return this;
  }

   /**
   * Recording of the call. Available after call ends.
   * @return recordingUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://retellai.s3.us-west-2.amazonaws.com/Jabr9TXYYJHfvl6Syypi88rdAHYHmcq6/recording.wav", value = "Recording of the call. Available after call ends.")

  public String getRecordingUrl() {
    return recordingUrl;
  }


  public void setRecordingUrl(String recordingUrl) {
    
    
    
    this.recordingUrl = recordingUrl;
  }


  public CallDetailAllOf publicLogUrl(String publicLogUrl) {
    
    
    
    
    this.publicLogUrl = publicLogUrl;
    return this;
  }

   /**
   * Public log of the call, containing details about all the requests and responses received in LLM WebSocket, latency tracking for each turntaking, helpful for debugging and tracing. Available after call ends.
   * @return publicLogUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://retellai.s3.us-west-2.amazonaws.com/Jabr9TXYYJHfvl6Syypi88rdAHYHmcq6/public_log.txt", value = "Public log of the call, containing details about all the requests and responses received in LLM WebSocket, latency tracking for each turntaking, helpful for debugging and tracing. Available after call ends.")

  public String getPublicLogUrl() {
    return publicLogUrl;
  }


  public void setPublicLogUrl(String publicLogUrl) {
    
    
    
    this.publicLogUrl = publicLogUrl;
  }


  public CallDetailAllOf e2eLatency(CallDetailAllOfE2eLatency e2eLatency) {
    
    
    
    
    this.e2eLatency = e2eLatency;
    return this;
  }

   /**
   * Get e2eLatency
   * @return e2eLatency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CallDetailAllOfE2eLatency getE2eLatency() {
    return e2eLatency;
  }


  public void setE2eLatency(CallDetailAllOfE2eLatency e2eLatency) {
    
    
    
    this.e2eLatency = e2eLatency;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CallDetailAllOf instance itself
   */
  public CallDetailAllOf putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CallDetailAllOf callDetailAllOf = (CallDetailAllOf) o;
    return Objects.equals(this.endTimestamp, callDetailAllOf.endTimestamp) &&
        Objects.equals(this.transcript, callDetailAllOf.transcript) &&
        Objects.equals(this.transcriptObject, callDetailAllOf.transcriptObject) &&
        Objects.equals(this.recordingUrl, callDetailAllOf.recordingUrl) &&
        Objects.equals(this.publicLogUrl, callDetailAllOf.publicLogUrl) &&
        Objects.equals(this.e2eLatency, callDetailAllOf.e2eLatency)&&
        Objects.equals(this.additionalProperties, callDetailAllOf.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endTimestamp, transcript, transcriptObject, recordingUrl, publicLogUrl, e2eLatency, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CallDetailAllOf {\n");
    sb.append("    endTimestamp: ").append(toIndentedString(endTimestamp)).append("\n");
    sb.append("    transcript: ").append(toIndentedString(transcript)).append("\n");
    sb.append("    transcriptObject: ").append(toIndentedString(transcriptObject)).append("\n");
    sb.append("    recordingUrl: ").append(toIndentedString(recordingUrl)).append("\n");
    sb.append("    publicLogUrl: ").append(toIndentedString(publicLogUrl)).append("\n");
    sb.append("    e2eLatency: ").append(toIndentedString(e2eLatency)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("end_timestamp");
    openapiFields.add("transcript");
    openapiFields.add("transcript_object");
    openapiFields.add("recording_url");
    openapiFields.add("public_log_url");
    openapiFields.add("e2e_latency");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CallDetailAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CallDetailAllOf.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CallDetailAllOf is not found in the empty JSON string", CallDetailAllOf.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("transcript") != null && !jsonObj.get("transcript").isJsonNull()) && !jsonObj.get("transcript").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transcript` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transcript").toString()));
      }
      if (jsonObj.get("transcript_object") != null && !jsonObj.get("transcript_object").isJsonNull()) {
        JsonArray jsonArraytranscriptObject = jsonObj.getAsJsonArray("transcript_object");
        if (jsonArraytranscriptObject != null) {
          // ensure the json data is an array
          if (!jsonObj.get("transcript_object").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `transcript_object` to be an array in the JSON string but got `%s`", jsonObj.get("transcript_object").toString()));
          }

          // validate the optional field `transcript_object` (array)
          for (int i = 0; i < jsonArraytranscriptObject.size(); i++) {
            Utterance.validateJsonObject(jsonArraytranscriptObject.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("recording_url") != null && !jsonObj.get("recording_url").isJsonNull()) && !jsonObj.get("recording_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recording_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recording_url").toString()));
      }
      if ((jsonObj.get("public_log_url") != null && !jsonObj.get("public_log_url").isJsonNull()) && !jsonObj.get("public_log_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `public_log_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("public_log_url").toString()));
      }
      // validate the optional field `e2e_latency`
      if (jsonObj.get("e2e_latency") != null && !jsonObj.get("e2e_latency").isJsonNull()) {
        CallDetailAllOfE2eLatency.validateJsonObject(jsonObj.getAsJsonObject("e2e_latency"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CallDetailAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CallDetailAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CallDetailAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CallDetailAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<CallDetailAllOf>() {
           @Override
           public void write(JsonWriter out, CallDetailAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CallDetailAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CallDetailAllOf instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CallDetailAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CallDetailAllOf
  * @throws IOException if the JSON string is invalid with respect to CallDetailAllOf
  */
  public static CallDetailAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CallDetailAllOf.class);
  }

 /**
  * Convert an instance of CallDetailAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

