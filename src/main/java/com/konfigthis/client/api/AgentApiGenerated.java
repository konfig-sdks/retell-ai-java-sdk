/*
 * Retell SDK
 * API for voice AI. Effortlessly integrate human-like Voice AI into your product. | We are building an API that enables your product to provide an intuitive and engaging way for user interaction - through voice.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@retellai.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AgentCreateNewAgentRequest;
import com.konfigthis.client.model.AgentResponse;
import com.konfigthis.client.model.BaseAgent;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AgentApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AgentApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AgentApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewAgentCall(AgentCreateNewAgentRequest agentCreateNewAgentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = agentCreateNewAgentRequest;

        // create path and map variables
        String localVarPath = "/create-agent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewAgentValidateBeforeCall(AgentCreateNewAgentRequest agentCreateNewAgentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentCreateNewAgentRequest' is set
        if (agentCreateNewAgentRequest == null) {
            throw new ApiException("Missing the required parameter 'agentCreateNewAgentRequest' when calling createNewAgent(Async)");
        }

        return createNewAgentCall(agentCreateNewAgentRequest, _callback);

    }


    private ApiResponse<AgentResponse> createNewAgentWithHttpInfo(AgentCreateNewAgentRequest agentCreateNewAgentRequest) throws ApiException {
        okhttp3.Call localVarCall = createNewAgentValidateBeforeCall(agentCreateNewAgentRequest, null);
        Type localVarReturnType = new TypeToken<AgentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewAgentAsync(AgentCreateNewAgentRequest agentCreateNewAgentRequest, final ApiCallback<AgentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewAgentValidateBeforeCall(agentCreateNewAgentRequest, _callback);
        Type localVarReturnType = new TypeToken<AgentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateNewAgentRequestBuilder {
        private String llmWebsocketUrl;
        private String voiceId;
        private Double voiceTemperature;
        private Double voiceSpeed;
        private Double responsiveness;
        private Boolean enableBackchannel;
        private String ambientSound;
        private String agentName;
        private String language;
        private String webhookUrl;
        private List<String> boostedKeywords;
        private Boolean formatText;
        private Boolean optOutSensitiveDataStorage;
        private AgentCreateNewAgentRequest agentCreateNewAgentRequest;

        private CreateNewAgentRequestBuilder() {
        }

        /**
         * Set agentCreateNewAgentRequest
         * @param agentCreateNewAgentRequest  (optional)
         * @return CreateNewAgentRequestBuilder
         */
        public CreateNewAgentRequestBuilder agentCreateNewAgentRequest(AgentCreateNewAgentRequest agentCreateNewAgentRequest) {
            this.agentCreateNewAgentRequest = agentCreateNewAgentRequest;
            return this;
        }

        /**
         * Set llmWebsocketUrl
         * @param llmWebsocketUrl The URL we will establish LLM websocket for getting response, usually your server. Check out [LLM WebSocket](https://raw.githubusercontent.com) for more about request format (sent from us) and response format (send to us). (optional)
         * @return CreateNewAgentRequestBuilder
         */
        public CreateNewAgentRequestBuilder llmWebsocketUrl(String llmWebsocketUrl) {
            this.llmWebsocketUrl = llmWebsocketUrl;
            return this;
        }
        
        /**
         * Set voiceId
         * @param voiceId Unique voice id used for the agent. Find list of available voices and their preview in Dashboard. (optional)
         * @return CreateNewAgentRequestBuilder
         */
        public CreateNewAgentRequestBuilder voiceId(String voiceId) {
            this.voiceId = voiceId;
            return this;
        }
        
        /**
         * Set voiceTemperature
         * @param voiceTemperature Controls how stable the voice is. Value ranging from [0,2]. Lower value means more stable, and higher value means more variant speech generation. Currently this setting only applies to &#x60;11labs&#x60; voices. If unset, default value 1 will apply. (optional)
         * @return CreateNewAgentRequestBuilder
         */
        public CreateNewAgentRequestBuilder voiceTemperature(Double voiceTemperature) {
            this.voiceTemperature = voiceTemperature;
            return this;
        }
        
        /**
         * Set voiceSpeed
         * @param voiceSpeed Controls speed of voice. Value ranging from [0.5,2]. Lower value means slower speech, while higher value means faster speech rate. If unset, default value 1 will apply. (optional)
         * @return CreateNewAgentRequestBuilder
         */
        public CreateNewAgentRequestBuilder voiceSpeed(Double voiceSpeed) {
            this.voiceSpeed = voiceSpeed;
            return this;
        }
        
        /**
         * Set responsiveness
         * @param responsiveness Controls how responsive is the agent. Value ranging from [0,1]. Lower value means less responsive agent (wait more, respond slower), while higher value means faster exchanges (respond when it can). If unset, default value 1 will apply. (optional)
         * @return CreateNewAgentRequestBuilder
         */
        public CreateNewAgentRequestBuilder responsiveness(Double responsiveness) {
            this.responsiveness = responsiveness;
            return this;
        }
        
        /**
         * Set enableBackchannel
         * @param enableBackchannel Controls whether the agent would backchannel (agent interjects the speaker with phrases like \\\&quot;yeah\\\&quot;, \\\&quot;uh-huh\\\&quot; to signify interest and engagement). Backchannel when enabled tends to show up more in longer user utterances. If not set, agent will not backchannel. (optional)
         * @return CreateNewAgentRequestBuilder
         */
        public CreateNewAgentRequestBuilder enableBackchannel(Boolean enableBackchannel) {
            this.enableBackchannel = enableBackchannel;
            return this;
        }
        
        /**
         * Set ambientSound
         * @param ambientSound If set, will add ambient environment sound to the call to make experience more realistic. Currently supports the following options:  - &#x60;coffee-shop&#x60;: Coffee shop ambience with people chatting in background. [Listen to Ambience](https://retell-utils-public.s3.us-west-2.amazonaws.com/coffee-shop.wav)  - &#x60;convention-hall&#x60;: Convention hall ambience, with some echo and people chatting in background. [Listen to Ambience](https://retell-utils-public.s3.us-west-2.amazonaws.com/convention-hall.wav)  - &#x60;summer-outdoor&#x60;: Summer outdoor ambience with cicada chirping. [Listen to Ambience](https://retell-utils-public.s3.us-west-2.amazonaws.com/summer-outdoor.wav)  - &#x60;mountain-outdoor&#x60;: Mountain outdoor ambience with birds singing. [Listen to Ambience](https://retell-utils-public.s3.us-west-2.amazonaws.com/mountain-outdoor.wav)   Set to string &#x60;null&#x60; to remove ambient sound from this agent.  (optional)
         * @return CreateNewAgentRequestBuilder
         */
        public CreateNewAgentRequestBuilder ambientSound(String ambientSound) {
            this.ambientSound = ambientSound;
            return this;
        }
        
        /**
         * Set agentName
         * @param agentName The name of the agent. Only used for your own reference. (optional)
         * @return CreateNewAgentRequestBuilder
         */
        public CreateNewAgentRequestBuilder agentName(String agentName) {
            this.agentName = agentName;
            return this;
        }
        
        /**
         * Set language
         * @param language &#x60;Beta feature, use with caution.&#x60;   This setting specifies the agent&#39;s operational language, including base language and dialect. Speech recognition considers both elements, but text-to-speech currently only recognizes the base language.    For instance, selecting &#x60;en-GB&#x60; optimizes speech recognition for British English, yet text-to-speech output will be in standard English. If dialect-specific text-to-speech is required, please contact us for support.   - &#x60;11lab voices&#x60;: supports English(en), German(de), Spanish(es), Hindi(hi), Portuguese(pt)   - &#x60;openAI voices&#x60;: supports English(en), German(de), Spanish(es), Hindi(hi), Portuguese(pt), Japanese(ja)   - &#x60;deepgram voices&#x60;: supports English(en)  (optional)
         * @return CreateNewAgentRequestBuilder
         */
        public CreateNewAgentRequestBuilder language(String language) {
            this.language = language;
            return this;
        }
        
        /**
         * Set webhookUrl
         * @param webhookUrl The webhook for agent to listen to call events. See what events it would get at [webhook doc](https://raw.githubusercontent.com). If set, will binds webhook events for this agent to the specified url, and will ignore the account level webhook for this agent. Set to string &#x60;null&#x60; to remove webhook url from this agent. (optional)
         * @return CreateNewAgentRequestBuilder
         */
        public CreateNewAgentRequestBuilder webhookUrl(String webhookUrl) {
            this.webhookUrl = webhookUrl;
            return this;
        }
        
        /**
         * Set boostedKeywords
         * @param boostedKeywords Provide a customized list of keywords to bias the transcriber model, so that these words are more likely to get transcribed. Commonly used for names, brands, street, etc. (optional)
         * @return CreateNewAgentRequestBuilder
         */
        public CreateNewAgentRequestBuilder boostedKeywords(List<String> boostedKeywords) {
            this.boostedKeywords = boostedKeywords;
            return this;
        }
        
        /**
         * Set formatText
         * @param formatText Whether to format the transcribed text with inverse text normalization. It transforms the spoken form of text into written form for entities like phone number, email address, street address, etc. For example, \\\&quot;february fourth twenty twenty two\\\&quot; can be converted into \\\&quot;february 4th 2022\\\&quot;. If not set, the default is true. (optional)
         * @return CreateNewAgentRequestBuilder
         */
        public CreateNewAgentRequestBuilder formatText(Boolean formatText) {
            this.formatText = formatText;
            return this;
        }
        
        /**
         * Set optOutSensitiveDataStorage
         * @param optOutSensitiveDataStorage Disable transcripts and recordings storage for enhanced privacy. Access transcripts securely via webhooks. (optional)
         * @return CreateNewAgentRequestBuilder
         */
        public CreateNewAgentRequestBuilder optOutSensitiveDataStorage(Boolean optOutSensitiveDataStorage) {
            this.optOutSensitiveDataStorage = optOutSensitiveDataStorage;
            return this;
        }
        
        /**
         * Build call for createNewAgent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created a new agent. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AgentCreateNewAgentRequest agentCreateNewAgentRequest = buildBodyParams();
            return createNewAgentCall(agentCreateNewAgentRequest, _callback);
        }

        private AgentCreateNewAgentRequest buildBodyParams() {
            return this.agentCreateNewAgentRequest;
        }

        /**
         * Execute createNewAgent request
         * @return AgentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created a new agent. </td><td>  -  </td></tr>
         </table>
         */
        public AgentResponse execute() throws ApiException {
            AgentCreateNewAgentRequest agentCreateNewAgentRequest = buildBodyParams();
            ApiResponse<AgentResponse> localVarResp = createNewAgentWithHttpInfo(agentCreateNewAgentRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createNewAgent request with HTTP info returned
         * @return ApiResponse&lt;AgentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created a new agent. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AgentResponse> executeWithHttpInfo() throws ApiException {
            AgentCreateNewAgentRequest agentCreateNewAgentRequest = buildBodyParams();
            return createNewAgentWithHttpInfo(agentCreateNewAgentRequest);
        }

        /**
         * Execute createNewAgent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Successfully created a new agent. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AgentResponse> _callback) throws ApiException {
            AgentCreateNewAgentRequest agentCreateNewAgentRequest = buildBodyParams();
            return createNewAgentAsync(agentCreateNewAgentRequest, _callback);
        }
    }

    /**
     * 
     * Create a new agent
     * @param agentCreateNewAgentRequest  (required)
     * @return CreateNewAgentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created a new agent. </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewAgentRequestBuilder createNewAgent() throws IllegalArgumentException {
        return new CreateNewAgentRequestBuilder();
    }
    private okhttp3.Call deleteExistingAgentCall(String agentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/delete-agent/{agent_id}"
            .replace("{" + "agent_id" + "}", localVarApiClient.escapeString(agentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteExistingAgentValidateBeforeCall(String agentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentId' is set
        if (agentId == null) {
            throw new ApiException("Missing the required parameter 'agentId' when calling deleteExistingAgent(Async)");
        }

        return deleteExistingAgentCall(agentId, _callback);

    }


    private ApiResponse<Void> deleteExistingAgentWithHttpInfo(String agentId) throws ApiException {
        okhttp3.Call localVarCall = deleteExistingAgentValidateBeforeCall(agentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteExistingAgentAsync(String agentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteExistingAgentValidateBeforeCall(agentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteExistingAgentRequestBuilder {
        private final String agentId;

        private DeleteExistingAgentRequestBuilder(String agentId) {
            this.agentId = agentId;
        }

        /**
         * Build call for deleteExistingAgent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteExistingAgentCall(agentId, _callback);
        }


        /**
         * Execute deleteExistingAgent request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteExistingAgentWithHttpInfo(agentId);
        }

        /**
         * Execute deleteExistingAgent request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteExistingAgentWithHttpInfo(agentId);
        }

        /**
         * Execute deleteExistingAgent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteExistingAgentAsync(agentId, _callback);
        }
    }

    /**
     * 
     * Delete an existing agent
     * @param agentId Unique id of the agent to be deleted. (required)
     * @return DeleteExistingAgentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public DeleteExistingAgentRequestBuilder deleteExistingAgent(String agentId) throws IllegalArgumentException {
        if (agentId == null) throw new IllegalArgumentException("\"agentId\" is required but got null");
            

        return new DeleteExistingAgentRequestBuilder(agentId);
    }
    private okhttp3.Call getAllCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/list-agents";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAllCall(_callback);

    }


    private ApiResponse<List<AgentResponse>> getAllWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAllValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<AgentResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllAsync(final ApiCallback<List<AgentResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<AgentResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllRequestBuilder {

        private GetAllRequestBuilder() {
        }

        /**
         * Build call for getAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved all agents. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllCall(_callback);
        }


        /**
         * Execute getAll request
         * @return List&lt;AgentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved all agents. </td><td>  -  </td></tr>
         </table>
         */
        public List<AgentResponse> execute() throws ApiException {
            ApiResponse<List<AgentResponse>> localVarResp = getAllWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAll request with HTTP info returned
         * @return ApiResponse&lt;List&lt;AgentResponse&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved all agents. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<AgentResponse>> executeWithHttpInfo() throws ApiException {
            return getAllWithHttpInfo();
        }

        /**
         * Execute getAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved all agents. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<AgentResponse>> _callback) throws ApiException {
            return getAllAsync(_callback);
        }
    }

    /**
     * 
     * List all agents
     * @return GetAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved all agents. </td><td>  -  </td></tr>
     </table>
     */
    public GetAllRequestBuilder getAll() throws IllegalArgumentException {
        return new GetAllRequestBuilder();
    }
    private okhttp3.Call getDetailsCall(String agentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/get-agent/{agent_id}"
            .replace("{" + "agent_id" + "}", localVarApiClient.escapeString(agentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailsValidateBeforeCall(String agentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentId' is set
        if (agentId == null) {
            throw new ApiException("Missing the required parameter 'agentId' when calling getDetails(Async)");
        }

        return getDetailsCall(agentId, _callback);

    }


    private ApiResponse<AgentResponse> getDetailsWithHttpInfo(String agentId) throws ApiException {
        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(agentId, null);
        Type localVarReturnType = new TypeToken<AgentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetailsAsync(String agentId, final ApiCallback<AgentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(agentId, _callback);
        Type localVarReturnType = new TypeToken<AgentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetailsRequestBuilder {
        private final String agentId;

        private GetDetailsRequestBuilder(String agentId) {
            this.agentId = agentId;
        }

        /**
         * Build call for getDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved an agent. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetailsCall(agentId, _callback);
        }


        /**
         * Execute getDetails request
         * @return AgentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved an agent. </td><td>  -  </td></tr>
         </table>
         */
        public AgentResponse execute() throws ApiException {
            ApiResponse<AgentResponse> localVarResp = getDetailsWithHttpInfo(agentId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetails request with HTTP info returned
         * @return ApiResponse&lt;AgentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved an agent. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AgentResponse> executeWithHttpInfo() throws ApiException {
            return getDetailsWithHttpInfo(agentId);
        }

        /**
         * Execute getDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully retrieved an agent. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AgentResponse> _callback) throws ApiException {
            return getDetailsAsync(agentId, _callback);
        }
    }

    /**
     * 
     * Retrieve details of a specific agent
     * @param agentId Unique id of the agent to be retrieved. (required)
     * @return GetDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved an agent. </td><td>  -  </td></tr>
     </table>
     */
    public GetDetailsRequestBuilder getDetails(String agentId) throws IllegalArgumentException {
        if (agentId == null) throw new IllegalArgumentException("\"agentId\" is required but got null");
            

        return new GetDetailsRequestBuilder(agentId);
    }
    private okhttp3.Call updateExistingAgentCall(String agentId, BaseAgent baseAgent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = baseAgent;

        // create path and map variables
        String localVarPath = "/update-agent/{agent_id}"
            .replace("{" + "agent_id" + "}", localVarApiClient.escapeString(agentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateExistingAgentValidateBeforeCall(String agentId, BaseAgent baseAgent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentId' is set
        if (agentId == null) {
            throw new ApiException("Missing the required parameter 'agentId' when calling updateExistingAgent(Async)");
        }

        // verify the required parameter 'baseAgent' is set
        if (baseAgent == null) {
            throw new ApiException("Missing the required parameter 'baseAgent' when calling updateExistingAgent(Async)");
        }

        return updateExistingAgentCall(agentId, baseAgent, _callback);

    }


    private ApiResponse<AgentResponse> updateExistingAgentWithHttpInfo(String agentId, BaseAgent baseAgent) throws ApiException {
        okhttp3.Call localVarCall = updateExistingAgentValidateBeforeCall(agentId, baseAgent, null);
        Type localVarReturnType = new TypeToken<AgentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateExistingAgentAsync(String agentId, BaseAgent baseAgent, final ApiCallback<AgentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateExistingAgentValidateBeforeCall(agentId, baseAgent, _callback);
        Type localVarReturnType = new TypeToken<AgentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateExistingAgentRequestBuilder {
        private final String agentId;
        private String llmWebsocketUrl;
        private String voiceId;
        private Double voiceTemperature;
        private Double voiceSpeed;
        private Double responsiveness;
        private Boolean enableBackchannel;
        private String ambientSound;
        private String agentName;
        private String language;
        private String webhookUrl;
        private List<String> boostedKeywords;
        private Boolean formatText;
        private Boolean optOutSensitiveDataStorage;

        private UpdateExistingAgentRequestBuilder(String agentId) {
            this.agentId = agentId;
        }

        /**
         * Set llmWebsocketUrl
         * @param llmWebsocketUrl The URL we will establish LLM websocket for getting response, usually your server. Check out [LLM WebSocket](https://raw.githubusercontent.com) for more about request format (sent from us) and response format (send to us). (optional)
         * @return UpdateExistingAgentRequestBuilder
         */
        public UpdateExistingAgentRequestBuilder llmWebsocketUrl(String llmWebsocketUrl) {
            this.llmWebsocketUrl = llmWebsocketUrl;
            return this;
        }
        
        /**
         * Set voiceId
         * @param voiceId Unique voice id used for the agent. Find list of available voices and their preview in Dashboard. (optional)
         * @return UpdateExistingAgentRequestBuilder
         */
        public UpdateExistingAgentRequestBuilder voiceId(String voiceId) {
            this.voiceId = voiceId;
            return this;
        }
        
        /**
         * Set voiceTemperature
         * @param voiceTemperature Controls how stable the voice is. Value ranging from [0,2]. Lower value means more stable, and higher value means more variant speech generation. Currently this setting only applies to &#x60;11labs&#x60; voices. If unset, default value 1 will apply. (optional)
         * @return UpdateExistingAgentRequestBuilder
         */
        public UpdateExistingAgentRequestBuilder voiceTemperature(Double voiceTemperature) {
            this.voiceTemperature = voiceTemperature;
            return this;
        }
        
        /**
         * Set voiceSpeed
         * @param voiceSpeed Controls speed of voice. Value ranging from [0.5,2]. Lower value means slower speech, while higher value means faster speech rate. If unset, default value 1 will apply. (optional)
         * @return UpdateExistingAgentRequestBuilder
         */
        public UpdateExistingAgentRequestBuilder voiceSpeed(Double voiceSpeed) {
            this.voiceSpeed = voiceSpeed;
            return this;
        }
        
        /**
         * Set responsiveness
         * @param responsiveness Controls how responsive is the agent. Value ranging from [0,1]. Lower value means less responsive agent (wait more, respond slower), while higher value means faster exchanges (respond when it can). If unset, default value 1 will apply. (optional)
         * @return UpdateExistingAgentRequestBuilder
         */
        public UpdateExistingAgentRequestBuilder responsiveness(Double responsiveness) {
            this.responsiveness = responsiveness;
            return this;
        }
        
        /**
         * Set enableBackchannel
         * @param enableBackchannel Controls whether the agent would backchannel (agent interjects the speaker with phrases like \\\&quot;yeah\\\&quot;, \\\&quot;uh-huh\\\&quot; to signify interest and engagement). Backchannel when enabled tends to show up more in longer user utterances. If not set, agent will not backchannel. (optional)
         * @return UpdateExistingAgentRequestBuilder
         */
        public UpdateExistingAgentRequestBuilder enableBackchannel(Boolean enableBackchannel) {
            this.enableBackchannel = enableBackchannel;
            return this;
        }
        
        /**
         * Set ambientSound
         * @param ambientSound If set, will add ambient environment sound to the call to make experience more realistic. Currently supports the following options:  - &#x60;coffee-shop&#x60;: Coffee shop ambience with people chatting in background. [Listen to Ambience](https://retell-utils-public.s3.us-west-2.amazonaws.com/coffee-shop.wav)  - &#x60;convention-hall&#x60;: Convention hall ambience, with some echo and people chatting in background. [Listen to Ambience](https://retell-utils-public.s3.us-west-2.amazonaws.com/convention-hall.wav)  - &#x60;summer-outdoor&#x60;: Summer outdoor ambience with cicada chirping. [Listen to Ambience](https://retell-utils-public.s3.us-west-2.amazonaws.com/summer-outdoor.wav)  - &#x60;mountain-outdoor&#x60;: Mountain outdoor ambience with birds singing. [Listen to Ambience](https://retell-utils-public.s3.us-west-2.amazonaws.com/mountain-outdoor.wav)   Set to string &#x60;null&#x60; to remove ambient sound from this agent.  (optional)
         * @return UpdateExistingAgentRequestBuilder
         */
        public UpdateExistingAgentRequestBuilder ambientSound(String ambientSound) {
            this.ambientSound = ambientSound;
            return this;
        }
        
        /**
         * Set agentName
         * @param agentName The name of the agent. Only used for your own reference. (optional)
         * @return UpdateExistingAgentRequestBuilder
         */
        public UpdateExistingAgentRequestBuilder agentName(String agentName) {
            this.agentName = agentName;
            return this;
        }
        
        /**
         * Set language
         * @param language &#x60;Beta feature, use with caution.&#x60;   This setting specifies the agent&#39;s operational language, including base language and dialect. Speech recognition considers both elements, but text-to-speech currently only recognizes the base language.    For instance, selecting &#x60;en-GB&#x60; optimizes speech recognition for British English, yet text-to-speech output will be in standard English. If dialect-specific text-to-speech is required, please contact us for support.   - &#x60;11lab voices&#x60;: supports English(en), German(de), Spanish(es), Hindi(hi), Portuguese(pt)   - &#x60;openAI voices&#x60;: supports English(en), German(de), Spanish(es), Hindi(hi), Portuguese(pt), Japanese(ja)   - &#x60;deepgram voices&#x60;: supports English(en)  (optional)
         * @return UpdateExistingAgentRequestBuilder
         */
        public UpdateExistingAgentRequestBuilder language(String language) {
            this.language = language;
            return this;
        }
        
        /**
         * Set webhookUrl
         * @param webhookUrl The webhook for agent to listen to call events. See what events it would get at [webhook doc](https://raw.githubusercontent.com). If set, will binds webhook events for this agent to the specified url, and will ignore the account level webhook for this agent. Set to string &#x60;null&#x60; to remove webhook url from this agent. (optional)
         * @return UpdateExistingAgentRequestBuilder
         */
        public UpdateExistingAgentRequestBuilder webhookUrl(String webhookUrl) {
            this.webhookUrl = webhookUrl;
            return this;
        }
        
        /**
         * Set boostedKeywords
         * @param boostedKeywords Provide a customized list of keywords to bias the transcriber model, so that these words are more likely to get transcribed. Commonly used for names, brands, street, etc. (optional)
         * @return UpdateExistingAgentRequestBuilder
         */
        public UpdateExistingAgentRequestBuilder boostedKeywords(List<String> boostedKeywords) {
            this.boostedKeywords = boostedKeywords;
            return this;
        }
        
        /**
         * Set formatText
         * @param formatText Whether to format the transcribed text with inverse text normalization. It transforms the spoken form of text into written form for entities like phone number, email address, street address, etc. For example, \\\&quot;february fourth twenty twenty two\\\&quot; can be converted into \\\&quot;february 4th 2022\\\&quot;. If not set, the default is true. (optional)
         * @return UpdateExistingAgentRequestBuilder
         */
        public UpdateExistingAgentRequestBuilder formatText(Boolean formatText) {
            this.formatText = formatText;
            return this;
        }
        
        /**
         * Set optOutSensitiveDataStorage
         * @param optOutSensitiveDataStorage Disable transcripts and recordings storage for enhanced privacy. Access transcripts securely via webhooks. (optional)
         * @return UpdateExistingAgentRequestBuilder
         */
        public UpdateExistingAgentRequestBuilder optOutSensitiveDataStorage(Boolean optOutSensitiveDataStorage) {
            this.optOutSensitiveDataStorage = optOutSensitiveDataStorage;
            return this;
        }
        
        /**
         * Build call for updateExistingAgent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated an agent. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BaseAgent baseAgent = buildBodyParams();
            return updateExistingAgentCall(agentId, baseAgent, _callback);
        }

        private BaseAgent buildBodyParams() {
            BaseAgent baseAgent = new BaseAgent();
            baseAgent.llmWebsocketUrl(this.llmWebsocketUrl);
            baseAgent.voiceId(this.voiceId);
            baseAgent.voiceTemperature(this.voiceTemperature);
            baseAgent.voiceSpeed(this.voiceSpeed);
            baseAgent.responsiveness(this.responsiveness);
            baseAgent.enableBackchannel(this.enableBackchannel);
            if (this.ambientSound != null)
            baseAgent.ambientSound(BaseAgent.AmbientSoundEnum.fromValue(this.ambientSound));
            baseAgent.agentName(this.agentName);
            if (this.language != null)
            baseAgent.language(BaseAgent.LanguageEnum.fromValue(this.language));
            baseAgent.webhookUrl(this.webhookUrl);
            baseAgent.boostedKeywords(this.boostedKeywords);
            baseAgent.formatText(this.formatText);
            baseAgent.optOutSensitiveDataStorage(this.optOutSensitiveDataStorage);
            return baseAgent;
        }

        /**
         * Execute updateExistingAgent request
         * @return AgentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated an agent. </td><td>  -  </td></tr>
         </table>
         */
        public AgentResponse execute() throws ApiException {
            BaseAgent baseAgent = buildBodyParams();
            ApiResponse<AgentResponse> localVarResp = updateExistingAgentWithHttpInfo(agentId, baseAgent);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateExistingAgent request with HTTP info returned
         * @return ApiResponse&lt;AgentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated an agent. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AgentResponse> executeWithHttpInfo() throws ApiException {
            BaseAgent baseAgent = buildBodyParams();
            return updateExistingAgentWithHttpInfo(agentId, baseAgent);
        }

        /**
         * Execute updateExistingAgent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully updated an agent. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AgentResponse> _callback) throws ApiException {
            BaseAgent baseAgent = buildBodyParams();
            return updateExistingAgentAsync(agentId, baseAgent, _callback);
        }
    }

    /**
     * 
     * Update an existing agent
     * @param agentId Unique id of the agent to be updated. (required)
     * @param baseAgent  (required)
     * @return UpdateExistingAgentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated an agent. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateExistingAgentRequestBuilder updateExistingAgent(String agentId) throws IllegalArgumentException {
        if (agentId == null) throw new IllegalArgumentException("\"agentId\" is required but got null");
            

        return new UpdateExistingAgentRequestBuilder(agentId);
    }
}
