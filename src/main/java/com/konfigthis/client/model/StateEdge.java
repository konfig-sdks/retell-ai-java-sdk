/*
 * Retell SDK
 * API for voice AI. Effortlessly integrate human-like Voice AI into your product. | We are building an API that enables your product to provide an intuitive and engaging way for user interaction - through voice.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@retellai.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ToolParameter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * StateEdge
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class StateEdge {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private ToolParameter parameters;

  public static final String SERIALIZED_NAME_DESTINATION_STATE_NAME = "destination_state_name";
  @SerializedName(SERIALIZED_NAME_DESTINATION_STATE_NAME)
  private String destinationStateName;

  public static final String SERIALIZED_NAME_SPEAK_DURING_TRANSITION = "speak_during_transition";
  @SerializedName(SERIALIZED_NAME_SPEAK_DURING_TRANSITION)
  private Boolean speakDuringTransition;

  public StateEdge() {
  }

  public StateEdge description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Describes what&#39;s the transition and at what time / criteria should this transition happen.
   * @return description
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Describes what's the transition and at what time / criteria should this transition happen.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public StateEdge parameters(ToolParameter parameters) {
    
    
    
    
    this.parameters = parameters;
    return this;
  }

   /**
   * Get parameters
   * @return parameters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ToolParameter getParameters() {
    return parameters;
  }


  public void setParameters(ToolParameter parameters) {
    
    
    
    this.parameters = parameters;
  }


  public StateEdge destinationStateName(String destinationStateName) {
    
    
    
    
    this.destinationStateName = destinationStateName;
    return this;
  }

   /**
   * The destination state name when going through transition of state via this edge. State transition internally is implemented as a tool call of LLM, and a tool call with name \&quot;transition_to_{destination_state_name}\&quot; will get created. Feel free to reference it inside the prompt.
   * @return destinationStateName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The destination state name when going through transition of state via this edge. State transition internally is implemented as a tool call of LLM, and a tool call with name \"transition_to_{destination_state_name}\" will get created. Feel free to reference it inside the prompt.")

  public String getDestinationStateName() {
    return destinationStateName;
  }


  public void setDestinationStateName(String destinationStateName) {
    
    
    
    this.destinationStateName = destinationStateName;
  }


  public StateEdge speakDuringTransition(Boolean speakDuringTransition) {
    
    
    
    
    this.speakDuringTransition = speakDuringTransition;
    return this;
  }

   /**
   * After the state transitions, the agent would speak based on the new prompt and tools in the new state. This bit here controls whether to speak a transition sentence during the transition (so agent would say sentences like \&quot;Let&#39;s move on to the next section to help you set up an acount.\&quot;, and state transitions, and agent continue to speak.). Usually this is not necessary, and is recommended to set to false to avoid LLM repeating itself during and after transition.
   * @return speakDuringTransition
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "After the state transitions, the agent would speak based on the new prompt and tools in the new state. This bit here controls whether to speak a transition sentence during the transition (so agent would say sentences like \"Let's move on to the next section to help you set up an acount.\", and state transitions, and agent continue to speak.). Usually this is not necessary, and is recommended to set to false to avoid LLM repeating itself during and after transition.")

  public Boolean getSpeakDuringTransition() {
    return speakDuringTransition;
  }


  public void setSpeakDuringTransition(Boolean speakDuringTransition) {
    
    
    
    this.speakDuringTransition = speakDuringTransition;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the StateEdge instance itself
   */
  public StateEdge putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StateEdge stateEdge = (StateEdge) o;
    return Objects.equals(this.description, stateEdge.description) &&
        Objects.equals(this.parameters, stateEdge.parameters) &&
        Objects.equals(this.destinationStateName, stateEdge.destinationStateName) &&
        Objects.equals(this.speakDuringTransition, stateEdge.speakDuringTransition)&&
        Objects.equals(this.additionalProperties, stateEdge.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, parameters, destinationStateName, speakDuringTransition, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StateEdge {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    destinationStateName: ").append(toIndentedString(destinationStateName)).append("\n");
    sb.append("    speakDuringTransition: ").append(toIndentedString(speakDuringTransition)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("parameters");
    openapiFields.add("destination_state_name");
    openapiFields.add("speak_during_transition");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("destination_state_name");
    openapiRequiredFields.add("speak_during_transition");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to StateEdge
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!StateEdge.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StateEdge is not found in the empty JSON string", StateEdge.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StateEdge.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `parameters`
      if (jsonObj.get("parameters") != null && !jsonObj.get("parameters").isJsonNull()) {
        ToolParameter.validateJsonObject(jsonObj.getAsJsonObject("parameters"));
      }
      if (!jsonObj.get("destination_state_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destination_state_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destination_state_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StateEdge.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StateEdge' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StateEdge> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StateEdge.class));

       return (TypeAdapter<T>) new TypeAdapter<StateEdge>() {
           @Override
           public void write(JsonWriter out, StateEdge value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public StateEdge read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             StateEdge instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of StateEdge given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of StateEdge
  * @throws IOException if the JSON string is invalid with respect to StateEdge
  */
  public static StateEdge fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StateEdge.class);
  }

 /**
  * Convert an instance of StateEdge to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

