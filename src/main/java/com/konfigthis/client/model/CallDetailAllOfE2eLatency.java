/*
 * Retell SDK
 * API for voice AI. Effortlessly integrate human-like Voice AI into your product. | We are building an API that enables your product to provide an intuitive and engaging way for user interaction - through voice.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: founders@retellai.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * End to end latency (from user stops talking to agent start talking) tracking of the call, available after call ends. This latency does not account for the network trip time from Retell server to user frontend.
 */
@ApiModel(description = "End to end latency (from user stops talking to agent start talking) tracking of the call, available after call ends. This latency does not account for the network trip time from Retell server to user frontend.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CallDetailAllOfE2eLatency {
  public static final String SERIALIZED_NAME_P50 = "p50";
  @SerializedName(SERIALIZED_NAME_P50)
  private Double p50;

  public static final String SERIALIZED_NAME_P90 = "p90";
  @SerializedName(SERIALIZED_NAME_P90)
  private Double p90;

  public static final String SERIALIZED_NAME_P95 = "p95";
  @SerializedName(SERIALIZED_NAME_P95)
  private Double p95;

  public static final String SERIALIZED_NAME_P99 = "p99";
  @SerializedName(SERIALIZED_NAME_P99)
  private Double p99;

  public static final String SERIALIZED_NAME_MAX = "max";
  @SerializedName(SERIALIZED_NAME_MAX)
  private Double max;

  public static final String SERIALIZED_NAME_MIN = "min";
  @SerializedName(SERIALIZED_NAME_MIN)
  private Double min;

  public static final String SERIALIZED_NAME_NUM = "num";
  @SerializedName(SERIALIZED_NAME_NUM)
  private Double num;

  public CallDetailAllOfE2eLatency() {
  }

  public CallDetailAllOfE2eLatency p50(Double p50) {
    
    
    
    
    this.p50 = p50;
    return this;
  }

  public CallDetailAllOfE2eLatency p50(Integer p50) {
    
    
    
    
    this.p50 = p50.doubleValue();
    return this;
  }

   /**
   * 50 percentile of end to end latency.
   * @return p50
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0.8", value = "50 percentile of end to end latency.")

  public Double getP50() {
    return p50;
  }


  public void setP50(Double p50) {
    
    
    
    this.p50 = p50;
  }


  public CallDetailAllOfE2eLatency p90(Double p90) {
    
    
    
    
    this.p90 = p90;
    return this;
  }

  public CallDetailAllOfE2eLatency p90(Integer p90) {
    
    
    
    
    this.p90 = p90.doubleValue();
    return this;
  }

   /**
   * 90 percentile of end to end latency.
   * @return p90
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1.2", value = "90 percentile of end to end latency.")

  public Double getP90() {
    return p90;
  }


  public void setP90(Double p90) {
    
    
    
    this.p90 = p90;
  }


  public CallDetailAllOfE2eLatency p95(Double p95) {
    
    
    
    
    this.p95 = p95;
    return this;
  }

  public CallDetailAllOfE2eLatency p95(Integer p95) {
    
    
    
    
    this.p95 = p95.doubleValue();
    return this;
  }

   /**
   * 95 percentile of end to end latency.
   * @return p95
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1.5", value = "95 percentile of end to end latency.")

  public Double getP95() {
    return p95;
  }


  public void setP95(Double p95) {
    
    
    
    this.p95 = p95;
  }


  public CallDetailAllOfE2eLatency p99(Double p99) {
    
    
    
    
    this.p99 = p99;
    return this;
  }

  public CallDetailAllOfE2eLatency p99(Integer p99) {
    
    
    
    
    this.p99 = p99.doubleValue();
    return this;
  }

   /**
   * 99 percentile of end to end latency.
   * @return p99
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2.7", value = "99 percentile of end to end latency.")

  public Double getP99() {
    return p99;
  }


  public void setP99(Double p99) {
    
    
    
    this.p99 = p99;
  }


  public CallDetailAllOfE2eLatency max(Double max) {
    
    
    
    
    this.max = max;
    return this;
  }

  public CallDetailAllOfE2eLatency max(Integer max) {
    
    
    
    
    this.max = max.doubleValue();
    return this;
  }

   /**
   * Maximum end to end latency in the call.
   * @return max
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2.7", value = "Maximum end to end latency in the call.")

  public Double getMax() {
    return max;
  }


  public void setMax(Double max) {
    
    
    
    this.max = max;
  }


  public CallDetailAllOfE2eLatency min(Double min) {
    
    
    
    
    this.min = min;
    return this;
  }

  public CallDetailAllOfE2eLatency min(Integer min) {
    
    
    
    
    this.min = min.doubleValue();
    return this;
  }

   /**
   * Minimum end to end latency in the call.
   * @return min
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0.5", value = "Minimum end to end latency in the call.")

  public Double getMin() {
    return min;
  }


  public void setMin(Double min) {
    
    
    
    this.min = min;
  }


  public CallDetailAllOfE2eLatency num(Double num) {
    
    
    
    
    this.num = num;
    return this;
  }

  public CallDetailAllOfE2eLatency num(Integer num) {
    
    
    
    
    this.num = num.doubleValue();
    return this;
  }

   /**
   * Number of turn change. We track latency every time turn change between user and agent.
   * @return num
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "10", value = "Number of turn change. We track latency every time turn change between user and agent.")

  public Double getNum() {
    return num;
  }


  public void setNum(Double num) {
    
    
    
    this.num = num;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CallDetailAllOfE2eLatency instance itself
   */
  public CallDetailAllOfE2eLatency putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CallDetailAllOfE2eLatency callDetailAllOfE2eLatency = (CallDetailAllOfE2eLatency) o;
    return Objects.equals(this.p50, callDetailAllOfE2eLatency.p50) &&
        Objects.equals(this.p90, callDetailAllOfE2eLatency.p90) &&
        Objects.equals(this.p95, callDetailAllOfE2eLatency.p95) &&
        Objects.equals(this.p99, callDetailAllOfE2eLatency.p99) &&
        Objects.equals(this.max, callDetailAllOfE2eLatency.max) &&
        Objects.equals(this.min, callDetailAllOfE2eLatency.min) &&
        Objects.equals(this.num, callDetailAllOfE2eLatency.num)&&
        Objects.equals(this.additionalProperties, callDetailAllOfE2eLatency.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(p50, p90, p95, p99, max, min, num, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CallDetailAllOfE2eLatency {\n");
    sb.append("    p50: ").append(toIndentedString(p50)).append("\n");
    sb.append("    p90: ").append(toIndentedString(p90)).append("\n");
    sb.append("    p95: ").append(toIndentedString(p95)).append("\n");
    sb.append("    p99: ").append(toIndentedString(p99)).append("\n");
    sb.append("    max: ").append(toIndentedString(max)).append("\n");
    sb.append("    min: ").append(toIndentedString(min)).append("\n");
    sb.append("    num: ").append(toIndentedString(num)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("p50");
    openapiFields.add("p90");
    openapiFields.add("p95");
    openapiFields.add("p99");
    openapiFields.add("max");
    openapiFields.add("min");
    openapiFields.add("num");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CallDetailAllOfE2eLatency
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CallDetailAllOfE2eLatency.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CallDetailAllOfE2eLatency is not found in the empty JSON string", CallDetailAllOfE2eLatency.openapiRequiredFields.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CallDetailAllOfE2eLatency.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CallDetailAllOfE2eLatency' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CallDetailAllOfE2eLatency> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CallDetailAllOfE2eLatency.class));

       return (TypeAdapter<T>) new TypeAdapter<CallDetailAllOfE2eLatency>() {
           @Override
           public void write(JsonWriter out, CallDetailAllOfE2eLatency value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CallDetailAllOfE2eLatency read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CallDetailAllOfE2eLatency instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CallDetailAllOfE2eLatency given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CallDetailAllOfE2eLatency
  * @throws IOException if the JSON string is invalid with respect to CallDetailAllOfE2eLatency
  */
  public static CallDetailAllOfE2eLatency fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CallDetailAllOfE2eLatency.class);
  }

 /**
  * Convert an instance of CallDetailAllOfE2eLatency to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

